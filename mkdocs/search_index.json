{
    "docs": [
        {
            "location": "/", 
            "text": "BracketHighlighter\n\n\nA bracket matcher and highlighlighter for Sublime.\n\n\n\n\nOverview\n\n\nBracket Highlighter matches a variety of brackets such as: \n[]\n, \n()\n, \n{}\n, \n, \n''\n, \ntag\n/tag\n, and even custom brackets.\n\n\nThis was originally forked from pyparadigm\ns \nSublimeBrackets\n and \nSublimeTagmatcher\n (both are no longer available).  I forked this to fix some issues I had and to add some features I had wanted.  I also wanted to improve the efficiency of the matching.\n\n\nMoving forward, I have thrown away all the all code and have completely rewritten the entire code base to allow for a more flexibility, faster, and more feature rich experience.\n\n\n\n\nFeature List\n\n\n\n\nCustomizable to highlight almost any bracket\n\n\nCustomizable bracket highlight style\n\n\nHigh visibility bracket highlight mode\n\n\nSelectively disable or enable specific matching of tags, brackets, or quotes\n\n\nSelectively whitelist or blacklist matching of specific tags, brackets, or quotes based on language\n\n\nWhen bound to a shortcut, allow option to show line count and char count between match in the status bar\n\n\nHighlight basic brackets within strings\n\n\nWorks with multi-select\n\n\nConfigurable custom gutter icons\n\n\nToggle bracket escape mode for string brackets (regex|string)\n\n\nBracket plugins that can jump between bracket ends, select content, remove brackets and/or content, wrap selections with brackets, swap brackets, swap quotes (handling quote escaping between the main quotes), fold/unfold content between brackets, toggle through tag attribute selection, select both the opening and closing tag name to change both simultaneously.\n\n\n\n\nInstallation\n\n\nThe recommended installation method is via Package Control.  Learn more here: \nhttps://sublime.wbond.net/\n.\n\n\nCredits\n\n\n\n\npyparadigm: for his original efforts with SublimeBrackets and SublimeTagmatcher which originally BracketHighlighter was built off of and the inspiration for this project.\n\n\nBoundInCode: for his Tag icon\n\n\n\n\nLicense\n\n\nReleased under the MIT license.\n\n\nCopyright \n 2013 - 2015 Isaac Muse \n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \nSoftware\n), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \nAS IS\n, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "Home"
        }, 
        {
            "location": "/#brackethighlighter", 
            "text": "A bracket matcher and highlighlighter for Sublime.", 
            "title": "BracketHighlighter"
        }, 
        {
            "location": "/#overview", 
            "text": "Bracket Highlighter matches a variety of brackets such as:  [] ,  () ,  {} ,  ,  '' ,  tag /tag , and even custom brackets.  This was originally forked from pyparadigm s  SublimeBrackets  and  SublimeTagmatcher  (both are no longer available).  I forked this to fix some issues I had and to add some features I had wanted.  I also wanted to improve the efficiency of the matching.  Moving forward, I have thrown away all the all code and have completely rewritten the entire code base to allow for a more flexibility, faster, and more feature rich experience.", 
            "title": "Overview"
        }, 
        {
            "location": "/#feature-list", 
            "text": "Customizable to highlight almost any bracket  Customizable bracket highlight style  High visibility bracket highlight mode  Selectively disable or enable specific matching of tags, brackets, or quotes  Selectively whitelist or blacklist matching of specific tags, brackets, or quotes based on language  When bound to a shortcut, allow option to show line count and char count between match in the status bar  Highlight basic brackets within strings  Works with multi-select  Configurable custom gutter icons  Toggle bracket escape mode for string brackets (regex|string)  Bracket plugins that can jump between bracket ends, select content, remove brackets and/or content, wrap selections with brackets, swap brackets, swap quotes (handling quote escaping between the main quotes), fold/unfold content between brackets, toggle through tag attribute selection, select both the opening and closing tag name to change both simultaneously.", 
            "title": "Feature List"
        }, 
        {
            "location": "/#installation", 
            "text": "The recommended installation method is via Package Control.  Learn more here:  https://sublime.wbond.net/ .", 
            "title": "Installation"
        }, 
        {
            "location": "/#credits", 
            "text": "pyparadigm: for his original efforts with SublimeBrackets and SublimeTagmatcher which originally BracketHighlighter was built off of and the inspiration for this project.  BoundInCode: for his Tag icon", 
            "title": "Credits"
        }, 
        {
            "location": "/#license", 
            "text": "Released under the MIT license.  Copyright   2013 - 2015 Isaac Muse   Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the  Software ), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED  AS IS , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/usage/", 
            "text": "User Guide\n\n\nHow to use BracketHighlighter.\n\n\n\n\nGeneral Use\n\n\nIn general, BracketHighlighter (\nBH\n) will highlight brackets (or defined bracket like start and end blocks) surrounding the cursor.  By default, \nBH\n will put opening and closing icons in the gutter of the corresponding line containing open or closing bracket. \nBH\n, by default, will underline the closing and opening bracket as well.\n\n\nBuilt-in Supported brackets\n\n\nCurrently \nBH\n supports the following brackets out of the box:\n\n\n\n\nround\n\n\nsquare\n\n\ncurly\n\n\nangle\n\n\nsingle and double quotes\n\n\npython single and double quotes (Unicode and raw)\n\n\npython triple single and double quotes (Unicode and raw)\n\n\nJavaScript regex\n\n\nPerl regex\n\n\nRuby regex\n\n\nMarkdown italic\n\n\nMarkdown bold\n\n\nCSSedit groups\n\n\nRuby conditional statements\n\n\nC/C++ compiler switches\n\n\nPHP conditional keywords\n\n\nErlang conditional statements\n\n\nHTML/ColdFusion/XML tags\n\n\nBash conditional and looping constructs\n\n\n\n\nBH\n also supports highlighting basic sub brackets \n(), [], {}\n within supported regex and strings.\n\n\nGeneral Commands\n\n\nBH\n has a couple of additional features built-in.\n\n\nToggle Global Enable\n\n\nThe \nbh_toggle_enable\n command enables and disables \nBH\n globally.\n\n\nToggle String Bracket Escape Mode\n\n\nbh_toggle_string_escape_mode\n toggles \nBH\ns recognition mode of escaped sub brackets in strings and regex.  The modes are string escape mode and regex escape mode.\n\n\nBracket Plugin Commands\n\n\nBH\n is also extendable via plugins and provides a number of built in Bracket Plugins that take advantage of \nBH\ns matching to provide additional features.  Most plugin features are available via the \nTools-\nPackages-\nBracketHighlighter\n menu or the command palette.  To see how to configure shortcuts, see the \nExample.sublime-settings\n file.\n\n\nBracket Select Plugin\n\n\nThis plugin changes the selection inside between the brackets.  It can select the content or move the bracket to the opening and closing bracket.  Behavior is slightly modified for tags.\n\n\nSwap Brackets Plugin\n\n\nThis plugin allows the current brackets to another type of bracket.  See \nWrapping and Swapping Commands\n for more info.\n\n\nBracket Remove Plugin\n\n\nRemoves the surrounding brackets.\n\n\nFold Bracket Plugin\n\n\nFolds the content of the current surrounding brackets.\n\n\nSwap Quotes Plugin\n\n\nSwap the quotes style of surrounding quotes from double to single or vice versa.  It also handles escaping and unescaping of sub quotes.\n\n\nTag Plugin\n\n\nPlugin used to help highlight tags.\n\n\nAdditional tag settings found in \nbh_core.sublime-settings\n:\n\n\n    \n/* Plugin settings */\n\n\n    \n// Style to use for matched tags\n\n    \ntag_style\n:\n \ntag\n,\n\n\n    \n// Scopes to exclude from tag searches\n\n    \ntag_scope_exclude\n:\n \n[\nstring\n,\n \ncomment\n],\n\n\n    \n// Determine which style of tag-matching to use in which syntax\n\n    \ntag_mode\n:\n \n{\n\n        \nxhtml\n:\n \n[\nXML\n],\n\n        \nhtml\n:\n \n[\nHTML\n,\n \nHTML 5\n,\n \nPHP\n],\n\n        \ncfml\n:\n \n[\nHTML+CFML\n,\n \nColdFusion\n,\n \nColdFusionCFC\n]\n\n    \n}\n\n\n\n\n\n\nTag Attribute Select Plugin\n\n\nCycle through selecting tag attributes of tags.\n\n\nTag Name Select Plugin\n\n\nSelect the opening and closing tag name of current tag.\n\n\nBracket Wrapping Plugin\n\n\nWrap the current selection with supported bracket of your choice.  Wrapping definitions are configured in \nbh_wrapping.sublime-settings\n.\n\n\nBracket Swapping Plugin\n\n\nSwap the current surrounding bracket with supported bracket of your choice.  Swapping definitions are configured in \nbh_swapping.sublime-settings\n.\n\n\nWrapping and Swapping Commands\n\n\nBH\n provides a way to wrap content with brackets or swap brackets.\n\n\nSwapping Brackets\n\n\nBracket swapping support utilizes the \nswapbrackets\n bh_plugin to swap out the current highlighted brackets with another set of pre-defined brackets.  Allowed brackets are defined in the \nbh_swapping.sublime-settings\n file.  Swap rules are found under the key \nswapping\n where \nswapping\n is an array of language swap rules.\n\n\n    \nswapping\n:\n \n[\n\n        \n{\n\n            \nenabled\n:\n \ntrue\n,\n\n            \nlanguage_list\n:\n \n[\nC++\n,\n \nC\n],\n\n            \nlanguage_filter\n:\n \nwhitelist\n,\n\n            \nentries\n:\n \n[\n\n                \n{\nname\n:\n \nC/C++: #if\n,\n \nbrackets\n:\n \n[\n#if ${BH_SEL}\n,\n \n#endif\n]},\n\n                \n{\nname\n:\n \nC/C++: #if, #else\n,\n \nbrackets\n:\n \n[\n#if${BH_SEL}\n,\n \n#else\\n${BH_TAB:/* CODE */}\\n#endif\n]},\n\n                \n{\nname\n:\n \nC/C++: #if, #elif\n,\n \nbrackets\n:\n \n[\n#if${BH_SEL}\n,\n \n#elif ${BH_TAB:/* CONDITION */}\\n${BH_TAB:/* CODE */}\\n#endif\n]},\n\n                \n{\nname\n:\n \nC/C++: #ifdef\n,\n \nbrackets\n:\n \n[\n#ifdef${BH_SEL}\n,\n \n#endif\n]},\n\n                \n{\nname\n:\n \nC/C++: #ifdef, #else\n,\n \nbrackets\n:\n \n[\n#ifdef${BH_SEL}\n,\n \n#else\\n${BH_TAB:/* CODE */}\\n#endif\n]},\n\n                \n{\nname\n:\n \nC/C++: #ifndef\n,\n \nbrackets\n:\n \n[\n#ifndef${BH_SEL}\n,\n \n#endif\n]},\n\n                \n{\nname\n:\n \nC/C++: #ifndef, #else\n,\n \nbrackets\n:\n \n[\n#ifndef${BH_SEL}\n,\n \n#else\\n${BH_TAB:/* CODE */}\\n#endif\n]}\n\n            \n]\n\n        \n}\n\n    \n]\n\n\n\n\n\n\nEach language rule contains the following attributes:\n\n\n\n\n\n\n\n\nAttribute\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nenabled\n\n\nbool\n\n\nSpecifies if the rule is enabled.\n\n\n\n\n\n\nlanguage_list\n\n\n[string]\n\n\nAn array of languages.\n\n\n\n\n\n\nlanguage_filter\n\n\nstring\n\n\nA string that specifies if the \nlanguage_list\n is either a \nwhitelist\n or \nblacklist\n.\n\n\n\n\n\n\nentries\n\n\n[dict]\n\n\nAn array of dictionaries, where each dictionary describes a type of bracket that can be swapped to.\n\n\n\n\n\n\n\n\nWithin the language rules under \nentries\n, swap entries are defined.  Each entry represents a bracket you can swap to.\n\n\n\n\n\n\n\n\nEntry\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\nThe name of the entry as it will be seen in the command palette.\n\n\n\n\n\n\nbrackets\n\n\n[string]\n\n\nAn array consisting of a string that represents the opening bracket and a string that represents the closing bracket.\n\n\n\n\n\n\n\n\nWithin the \nbrackets\n, you can specify the where the cursor(s) will appear by using \n${BH_SEL}\n  If you would like the selection to display text as a hint to what a user should enter in the selection, you can use \n${BH_SEL:optional text}\n.\n\n\nWithin the \nbrackets\n, you can also define tab stops that a user can tab through and enter text.  The tab stop syntax is \n${BH_TAB}\n.  You can also define optional text within a tab stop to give the user a hint of what should be entered in at the tab stop using the following syntax \n${BH_TAB:optional text}\n.\n\n\nWrapping Brackets\n\n\nBH\n has a special command for wrapping selected text in pre-defined brackets.  Allowed brackets are defined in the \nbh_wrapping.sublime-settings\n file.  Wrap rules are found under the key \nwrapping\n where \nwrapping\n is an array of language wrap rules.\n\n\n    \nwrapping\n:\n \n[\n\n        \n{\n\n            \nenabled\n:\n \ntrue\n,\n\n            \nlanguage_list\n:\n \n[\nPlain text\n],\n\n            \nlanguage_filter\n:\n \nblacklist\n,\n\n            \nentries\n:\n \n[\n\n                \n{\nname\n:\n \n{} Curly\n,\n \nbrackets\n:\n \n[\n{\n,\n \n}${BH_SEL}\n],\n \ninsert_style\n:\n \n[\ninline\n,\n \nblock\n,\n \nindent_block\n]}\n\n            \n]\n\n        \n}\n\n    \n]\n\n\n\n\n\n\nEach language rule contains the following attributes:\n\n\n\n\n\n\n\n\nAttribute\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nenabled\n\n\nbool\n\n\nSpecifies if the rule is enabled.\n\n\n\n\n\n\nlanguage_list\n\n\n[string]\n\n\nAn array of languages.\n\n\n\n\n\n\nlanguage_filter\n\n\nstring\n\n\nA string that specifies if the \nlanguage_list\n is either a \nwhitelist\n or \nblacklist\n.\n\n\n\n\n\n\nentries\n\n\n[dict]\n\n\nAn array of dictionaries, where each dictionary describes a type of bracket that can be used to wrap the selection.\n\n\n\n\n\n\n\n\nWithin the language rules under \nentries\n, wrap entries are defined.  Each entry represents a bracket you can wrap the selection with.\n\n\n\n\n\n\n\n\nEntry\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\nThe name of the entry as it will be seen in the command palette.\n\n\n\n\n\n\nbrackets\n\n\n[string]\n\n\nAn array consisting of a string that represents the opening bracket and a string that represents the closing bracket.\n\n\n\n\n\n\ninsert_style\n\n\n[string]\n\n\nAn array consisting of allowed insertion styles.  Allowed insertion styles are: \ninline\n, \nblock\n, and \nindent_block\n.  Default is \n[\ninline\n]\n.\n\n\n\n\n\n\n\n\nWithin the \nbrackets\n, you can specify the where the cursor(s) will appear by using \n${BH_SEL}\n  If you would like the selection to display text as a hint to what a user should enter in the selection, you can use \n${BH_SEL:optional text}\n.\n\n\nWithin the \nbrackets\n, you can also define tab stops that a user can tab through and enter text.  The tab stop syntax is \n${BH_TAB}\n.  You can also define optional text within a tab stop to give the user a hint of what should be entered in at the tab stop using the following syntax \n${BH_TAB:optional text}\n.\n\n\nShortcuts\n\n\nBy default \nBH\n provides no shortcuts to avoid shortcut conflicts, but you can view the included \nExample.sublime-keymaps\n file to get an idea how to set up your own.", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/#user-guide", 
            "text": "How to use BracketHighlighter.", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#general-use", 
            "text": "In general, BracketHighlighter ( BH ) will highlight brackets (or defined bracket like start and end blocks) surrounding the cursor.  By default,  BH  will put opening and closing icons in the gutter of the corresponding line containing open or closing bracket.  BH , by default, will underline the closing and opening bracket as well.", 
            "title": "General Use"
        }, 
        {
            "location": "/usage/#built-in-supported-brackets", 
            "text": "Currently  BH  supports the following brackets out of the box:   round  square  curly  angle  single and double quotes  python single and double quotes (Unicode and raw)  python triple single and double quotes (Unicode and raw)  JavaScript regex  Perl regex  Ruby regex  Markdown italic  Markdown bold  CSSedit groups  Ruby conditional statements  C/C++ compiler switches  PHP conditional keywords  Erlang conditional statements  HTML/ColdFusion/XML tags  Bash conditional and looping constructs   BH  also supports highlighting basic sub brackets  (), [], {}  within supported regex and strings.", 
            "title": "Built-in Supported brackets"
        }, 
        {
            "location": "/usage/#general-commands", 
            "text": "BH  has a couple of additional features built-in.", 
            "title": "General Commands"
        }, 
        {
            "location": "/usage/#toggle-global-enable", 
            "text": "The  bh_toggle_enable  command enables and disables  BH  globally.", 
            "title": "Toggle Global Enable"
        }, 
        {
            "location": "/usage/#toggle-string-bracket-escape-mode", 
            "text": "bh_toggle_string_escape_mode  toggles  BH s recognition mode of escaped sub brackets in strings and regex.  The modes are string escape mode and regex escape mode.", 
            "title": "Toggle String Bracket Escape Mode"
        }, 
        {
            "location": "/usage/#bracket-plugin-commands", 
            "text": "BH  is also extendable via plugins and provides a number of built in Bracket Plugins that take advantage of  BH s matching to provide additional features.  Most plugin features are available via the  Tools- Packages- BracketHighlighter  menu or the command palette.  To see how to configure shortcuts, see the  Example.sublime-settings  file.", 
            "title": "Bracket Plugin Commands"
        }, 
        {
            "location": "/usage/#bracket-select-plugin", 
            "text": "This plugin changes the selection inside between the brackets.  It can select the content or move the bracket to the opening and closing bracket.  Behavior is slightly modified for tags.", 
            "title": "Bracket Select Plugin"
        }, 
        {
            "location": "/usage/#swap-brackets-plugin", 
            "text": "This plugin allows the current brackets to another type of bracket.  See  Wrapping and Swapping Commands  for more info.", 
            "title": "Swap Brackets Plugin"
        }, 
        {
            "location": "/usage/#bracket-remove-plugin", 
            "text": "Removes the surrounding brackets.", 
            "title": "Bracket Remove Plugin"
        }, 
        {
            "location": "/usage/#fold-bracket-plugin", 
            "text": "Folds the content of the current surrounding brackets.", 
            "title": "Fold Bracket Plugin"
        }, 
        {
            "location": "/usage/#swap-quotes-plugin", 
            "text": "Swap the quotes style of surrounding quotes from double to single or vice versa.  It also handles escaping and unescaping of sub quotes.", 
            "title": "Swap Quotes Plugin"
        }, 
        {
            "location": "/usage/#tag-plugin", 
            "text": "Plugin used to help highlight tags.  Additional tag settings found in  bh_core.sublime-settings :       /* Plugin settings */ \n\n     // Style to use for matched tags \n     tag_style :   tag , \n\n     // Scopes to exclude from tag searches \n     tag_scope_exclude :   [ string ,   comment ], \n\n     // Determine which style of tag-matching to use in which syntax \n     tag_mode :   { \n         xhtml :   [ XML ], \n         html :   [ HTML ,   HTML 5 ,   PHP ], \n         cfml :   [ HTML+CFML ,   ColdFusion ,   ColdFusionCFC ] \n     }", 
            "title": "Tag Plugin"
        }, 
        {
            "location": "/usage/#tag-attribute-select-plugin", 
            "text": "Cycle through selecting tag attributes of tags.", 
            "title": "Tag Attribute Select Plugin"
        }, 
        {
            "location": "/usage/#tag-name-select-plugin", 
            "text": "Select the opening and closing tag name of current tag.", 
            "title": "Tag Name Select Plugin"
        }, 
        {
            "location": "/usage/#bracket-wrapping-plugin", 
            "text": "Wrap the current selection with supported bracket of your choice.  Wrapping definitions are configured in  bh_wrapping.sublime-settings .", 
            "title": "Bracket Wrapping Plugin"
        }, 
        {
            "location": "/usage/#bracket-swapping-plugin", 
            "text": "Swap the current surrounding bracket with supported bracket of your choice.  Swapping definitions are configured in  bh_swapping.sublime-settings .", 
            "title": "Bracket Swapping Plugin"
        }, 
        {
            "location": "/usage/#wrapping-and-swapping-commands", 
            "text": "BH  provides a way to wrap content with brackets or swap brackets.", 
            "title": "Wrapping and Swapping Commands"
        }, 
        {
            "location": "/usage/#swapping-brackets", 
            "text": "Bracket swapping support utilizes the  swapbrackets  bh_plugin to swap out the current highlighted brackets with another set of pre-defined brackets.  Allowed brackets are defined in the  bh_swapping.sublime-settings  file.  Swap rules are found under the key  swapping  where  swapping  is an array of language swap rules.       swapping :   [ \n         { \n             enabled :   true , \n             language_list :   [ C++ ,   C ], \n             language_filter :   whitelist , \n             entries :   [ \n                 { name :   C/C++: #if ,   brackets :   [ #if ${BH_SEL} ,   #endif ]}, \n                 { name :   C/C++: #if, #else ,   brackets :   [ #if${BH_SEL} ,   #else\\n${BH_TAB:/* CODE */}\\n#endif ]}, \n                 { name :   C/C++: #if, #elif ,   brackets :   [ #if${BH_SEL} ,   #elif ${BH_TAB:/* CONDITION */}\\n${BH_TAB:/* CODE */}\\n#endif ]}, \n                 { name :   C/C++: #ifdef ,   brackets :   [ #ifdef${BH_SEL} ,   #endif ]}, \n                 { name :   C/C++: #ifdef, #else ,   brackets :   [ #ifdef${BH_SEL} ,   #else\\n${BH_TAB:/* CODE */}\\n#endif ]}, \n                 { name :   C/C++: #ifndef ,   brackets :   [ #ifndef${BH_SEL} ,   #endif ]}, \n                 { name :   C/C++: #ifndef, #else ,   brackets :   [ #ifndef${BH_SEL} ,   #else\\n${BH_TAB:/* CODE */}\\n#endif ]} \n             ] \n         } \n     ]   Each language rule contains the following attributes:     Attribute  Type  Description      enabled  bool  Specifies if the rule is enabled.    language_list  [string]  An array of languages.    language_filter  string  A string that specifies if the  language_list  is either a  whitelist  or  blacklist .    entries  [dict]  An array of dictionaries, where each dictionary describes a type of bracket that can be swapped to.     Within the language rules under  entries , swap entries are defined.  Each entry represents a bracket you can swap to.     Entry  Type  Description      name  string  The name of the entry as it will be seen in the command palette.    brackets  [string]  An array consisting of a string that represents the opening bracket and a string that represents the closing bracket.     Within the  brackets , you can specify the where the cursor(s) will appear by using  ${BH_SEL}   If you would like the selection to display text as a hint to what a user should enter in the selection, you can use  ${BH_SEL:optional text} .  Within the  brackets , you can also define tab stops that a user can tab through and enter text.  The tab stop syntax is  ${BH_TAB} .  You can also define optional text within a tab stop to give the user a hint of what should be entered in at the tab stop using the following syntax  ${BH_TAB:optional text} .", 
            "title": "Swapping Brackets"
        }, 
        {
            "location": "/usage/#wrapping-brackets", 
            "text": "BH  has a special command for wrapping selected text in pre-defined brackets.  Allowed brackets are defined in the  bh_wrapping.sublime-settings  file.  Wrap rules are found under the key  wrapping  where  wrapping  is an array of language wrap rules.       wrapping :   [ \n         { \n             enabled :   true , \n             language_list :   [ Plain text ], \n             language_filter :   blacklist , \n             entries :   [ \n                 { name :   {} Curly ,   brackets :   [ { ,   }${BH_SEL} ],   insert_style :   [ inline ,   block ,   indent_block ]} \n             ] \n         } \n     ]   Each language rule contains the following attributes:     Attribute  Type  Description      enabled  bool  Specifies if the rule is enabled.    language_list  [string]  An array of languages.    language_filter  string  A string that specifies if the  language_list  is either a  whitelist  or  blacklist .    entries  [dict]  An array of dictionaries, where each dictionary describes a type of bracket that can be used to wrap the selection.     Within the language rules under  entries , wrap entries are defined.  Each entry represents a bracket you can wrap the selection with.     Entry  Type  Description      name  string  The name of the entry as it will be seen in the command palette.    brackets  [string]  An array consisting of a string that represents the opening bracket and a string that represents the closing bracket.    insert_style  [string]  An array consisting of allowed insertion styles.  Allowed insertion styles are:  inline ,  block , and  indent_block .  Default is  [ inline ] .     Within the  brackets , you can specify the where the cursor(s) will appear by using  ${BH_SEL}   If you would like the selection to display text as a hint to what a user should enter in the selection, you can use  ${BH_SEL:optional text} .  Within the  brackets , you can also define tab stops that a user can tab through and enter text.  The tab stop syntax is  ${BH_TAB} .  You can also define optional text within a tab stop to give the user a hint of what should be entered in at the tab stop using the following syntax  ${BH_TAB:optional text} .", 
            "title": "Wrapping Brackets"
        }, 
        {
            "location": "/usage/#shortcuts", 
            "text": "By default  BH  provides no shortcuts to avoid shortcut conflicts, but you can view the included  Example.sublime-keymaps  file to get an idea how to set up your own.", 
            "title": "Shortcuts"
        }, 
        {
            "location": "/customize/", 
            "text": "Customization\n\n\nTweaking BracketHighlighter.\n\n\n\n\nOverview\n\n\nBH\n is extremely flexible and can be customized and extended to fit a user\ns needs.  The first step is to create a \nbh_core.sublime-settings\n in your \nUser\n folder.  This is where the bracket and style rules live.  By changing these settings, you can add support for new languages, or change the look of highlighting, and much more.\n\n\nGeneral Settings\n\n\nStyle and color will be discussed in greater depth in the \nConfiguring Highlight Style\n section.  But there are a number of general setting you can adjust to change how things look or work.  The settings are commented to explain their functionality.\n\n\nThese are the basic settings you can change:\n\n\n    \n//Debug logging\n\n    \ndebug_enable\n:\n \nfalse\n,\n\n\n    \n// When only either the left or right bracket can be found\n\n    \n// this defines if the unmatched bracket should be shown.\n\n    \nshow_unmatched\n \n:\n \ntrue\n,\n\n\n    \n// Do the opposite of \nshow_unmatched\n for the languages listed below\n\n    \nshow_unmatched_exceptions\n:\n \n[],\n\n\n    \n// Enable high visibility by default when sublime starts up\n\n    \n// If sublime is already running and this gets changed,\n\n    \n// you will not see any changes (restart required to see change)\n\n    \nhigh_visibility_enabled_by_default\n:\n \nfalse\n,\n\n\n    \n// Experimental: Creates a visible bar at the beginning of all lines between\n\n    \n// multiline bracket spans.\n\n    \ncontent_highlight_bar\n:\n \nfalse\n,\n\n\n    \n// Experimental: Align the content highlight bar at the bracket indent level\n\n    \nalign_content_highlight_bar\n:\n \nfalse\n,\n\n\n    \n// High visibility style and color for high visibility mode\n\n    \n// (solid|outline|underline)\n\n    \n// ST3 has additional options of (thin_underline|squiggly|stippled)\n\n    \nhigh_visibility_style\n:\n \noutline\n,\n\n\n    \n// (scope|__default__|__bracket__)\n\n    \nhigh_visibility_color\n:\n \n__bracket__\n,\n\n\n    \n// Match brackets only when the cursor is touching the inside of the bracket\n\n    \nmatch_only_adjacent\n:\n \nfalse\n,\n\n\n    \n// Character threshold to search\n\n    \nsearch_threshold\n:\n \n5000\n,\n\n\n    \n// Ignore threshold\n\n    \nignore_threshold\n:\n \nfalse\n,\n\n\n    \n// Set mode for string escapes to ignore (regex|string)\n\n    \nbracket_string_escape_mode\n:\n \nstring\n,\n\n\n    \n// Set max number of multi-select brackets that will be searched automatically\n\n    \nauto_selection_threshold\n \n:\n \n10\n,\n\n\n    \n// Enable this to completely kill highlighting if \nauto_selection_threshold\n\n    \n// is exceeded.  Default is to highlight up to the \nauto_selection_threshold\n.\n\n    \nkill_highlight_on_threshold\n:\n \ntrue\n,\n\n\n    \n// Disable gutter icons when doing multi-select\n\n    \nno_multi_select_icons\n:\n \nfalse\n,\n\n\n\n\n\n\nConfiguring Brackets\n\n\nBH\n has been written to allow users to define any brackets they would like to have highlighted.  There are two kinds of brackets you can define: \nscope_brackets\n (search file for scope regions and then use regex to test for opening and closing brackets) and \nbrackets\n (use regex to find opening and closing brackets).  \nbracket\n type should usually be the preferred type.  \nscope_brackets\n are usually used for brackets whose opening and closing are the same and not distinguishable form one another by regex; scope brackets must be contained in a continuous scope region like string for quotes etc.\n\n\n\n\nTip\n\n\nBrackets can be modified or even added without copying the entire bracket rule lists to the user settings.  See \nBracket Rule Management\n for more info.\n\n\n\n\nConfiguring Brackets Rules\n\n\nBrackets are defined under \nbrackets\n in \nbh_core.sublime-settings\n.\n\n\nAngle and Curly bracket will be used as an example (not all options may be shown in these examples):\n\n\n        \n{\n\n            \nname\n:\n \nangle\n,\n\n            \nopen\n:\n \n(\n)\n,\n\n            \nclose\n:\n \n(\n)\n,\n\n            \nstyle\n:\n \nangle\n,\n\n            \nscope_exclude\n:\n \n[\nstring\n,\n \ncomment\n,\n \nkeyword.operator\n],\n\n            \nlanguage_filter\n:\n \nwhitelist\n,\n\n            \nlanguage_list\n:\n \n[\nHTML\n,\n \nHTML 5\n,\n \nXML\n,\n \nPHP\n,\n \nHTML+CFML\n,\n \nColdFusion\n,\n \nColdFusionCFC\n],\n\n            \nplugin_library\n:\n \nbh_modules.tags\n,\n\n            \nenabled\n:\n \ntrue\n\n        \n},\n\n        \n{\n\n            \nname\n:\n \ncurly\n,\n\n            \nopen\n:\n \n(\\\\{)\n,\n\n            \nclose\n:\n \n(\\\\})\n,\n\n            \nstyle\n:\n \ncurly\n,\n\n            \nscope_exclude\n:\n \n[\nstring\n,\n \ncomment\n],\n\n            \nscope_exclude_exceptions\n:\n \n[\nstring.other.math.block.environment.latex\n],\n\n            \nlanguage_filter\n:\n \nblacklist\n,\n\n            \nlanguage_list\n:\n \n[\nPlain text\n],\n\n            \nfind_in_sub_search\n:\n \ntrue\n,\n\n            \nignore_string_escape\n:\n \ntrue\n,\n\n            \nenabled\n:\n \ntrue\n\n        \n},\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nThe name of the bracket (should be unique)\n\n\n\n\n\n\nopen\n\n\nDefines the opening bracket (one and only one capturing group must be present)\n\n\n\n\n\n\nclose\n\n\nDefines the closing bracket (one and only one capturing group must be present)\n\n\n\n\n\n\nstyle\n\n\nName of style definition to be used to highlight the brackets.  See \nConfiguring Bracket Styles\n for more info.\n\n\n\n\n\n\nscope_exclude\n\n\nScopes where the opening and closing brackets should be ignored.\n\n\n\n\n\n\nlanguage_filter\n\n\nThis works in conjunction with \nlanguage_list\n.  It specifies whether \nlanguage_list\n is a \nblacklist\n or \nwhitelist\n.\n\n\n\n\n\n\nlanguage_list\n\n\nAn array of tmLanguage file names that should be avoided or included for highlighting.  Looks to \nlanguage_filter\n to determine if avoidance or inclusion is used.\n\n\n\n\n\n\nenabled\n\n\nDisable or enable rule.\n\n\n\n\n\n\nscope_exclude_exceptions\n(optional)\n\n\nUsed to ignore excluding of sub scopes such as in the curly example above where \nstring\n is excluded, but not \nstring.other.math.block.environment.latex\n.\n\n\n\n\n\n\nplugin_library\n(optional)\n\n\nDefines plugin to use for determining matches (see Bracket Plugin API for more info on matching plugins).\n\n\n\n\n\n\nfind_in_sub_search\n(optional)\n\n\nThis rule should be included when doing sub bracket matching in \nscope_brackets\n (like finding round brackets between quotes etc.).  The setting must be as string and can be either (true\n\n\n\n\n\n\nignore_string_escape\n(optional)\n\n\nDo not ignore sub brackets found in strings and regex when escaped, but use internal escape logic to determine if the brackets should be ignored based on whether regex or string escape mode is set.\n\n\n\n\n\n\n\n\nConfiguring Scope Brackets Rules\n\n\nScope Brackets are defined under \nscope_brackets\n in \nbh_core.sublime-settings\n.\n\n\nPython Single Quote bracket will be used as an example (not all options are shown in this example):\n\n\n        \n{\n\n            \nname\n:\n \npy_single_quote\n,\n\n            \nopen\n:\n \nu?r?((?:\n)?\n)\n,\n\n            \nclose\n:\n \n((?:\n)?\n)\n,\n\n            \nstyle\n:\n \nsingle_quote\n,\n\n            \nscopes\n:\n \n[\nstring\n],\n\n            \nlanguage_filter\n:\n \nwhitelist\n,\n\n            \nlanguage_list\n:\n \n[\nPython\n],\n\n            \nsub_bracket_search\n:\n \ntrue\n,\n\n            \nenabled\n:\n \ntrue\n\n        \n},\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nThe name of the bracket (should be unique).\n\n\n\n\n\n\nopen\n\n\nDefines the opening bracket (one and only one capturing group must be present).\n\n\n\n\n\n\nclose\n\n\nDefines the closing bracket (one and only one capturing group must be present).\n\n\n\n\n\n\nstyle\n\n\nName of style definition to be used to highlight the brackets.  See \nConfiguring Bracket Styles\n for more info.\n\n\n\n\n\n\nscopes\n\n\nScope that should be searched to find the opening and closing brackets.\n\n\n\n\n\n\nlanguage_filter\n\n\nThis works in conjunction with \nlanguage_list\n.  It specifies whether \nlanguage_list\n is a \nblacklist\n or \nwhitelist\n.\n\n\n\n\n\n\nlanguage_list\n\n\nAn array of tmLanguage file names that should be avoided or included for highlighting.  Looks to \nlanguage_filter\n to determine if avoidance or inclusion is used.\n\n\n\n\n\n\nsub_bracket_search\n\n\nShould this scope bracket also search for sub brackets (like curly brackets in strings etc.).\n\n\n\n\n\n\nenabled\n\n\nDisable or enable rule.\n\n\n\n\n\n\nplugin_library\n(optional)\n\n\nDefines plugin to use for determining matches (see Bracket Plugin API for more info on matching plugins).\n\n\n\n\n\n\n\n\nBracket Rule Management\n\n\nIn the past, BracketHighlighter required a user to copy the entire bracket list to the user \nbh_core.sublime-settings\n file.  This was a cumbersome requirement that also punished a user because if they did this, they wouldn\nt automatically get updates to the rules as all the rules were now overridden by the user\ns settings file.\n\n\nBracketHighlighter now let\ns you add or modify existing rules without overriding the entire rule set or even the entire target rule.  Let\ns say you have a custom language you want to have on your machine. Now, you can simply add it to one of the two settings arrays: \nuser_scope_brackets\n and \nuser_brackets\n:\n\n\n    \nuser_scope_brackets\n:\n \n[],\n\n    \nuser_brackets\n:\n \n[\n\n        \n{\n\n            \nname\n:\n \nmylang\n,\n\n            \nopen\n:\n \n^\\\\s*\\\\b(if|subr|bytemap|enum|command|for|while|macro|do)\\\\b\n,\n\n            \nclose\n:\n \n\\\\b(e(?:if|subr|bytemap|enum|command|for|while|macro)|until)\\\\b\n,\n\n            \nstyle\n:\n \ndefault\n,\n\n            \nscope_exclude\n:\n \n[\nstring\n,\n \ncomment\n],\n\n            \nplugin_library\n:\n \nUser.bh_modules.mylangkeywords\n,\n\n            \nlanguage_filter\n:\n \nwhitelist\n,\n\n            \nlanguage_list\n:\n \n[\nmylang\n],\n\n            \nenabled\n:\n \ntrue\n\n        \n}\n\n    \n],\n\n\n\n\n\n\nLet\ns say you want to modify an existing rule, maybe just tweak the language list, all you have to do is use the same name and the item you want to change. Only that attribute will be overridden:\n\n\n    \nuser_brackets\n:\n \n[\n\n        \n// Angle\n\n        \n{\n\n            \nname\n:\n \nangle\n,\n\n            \nlanguage_list\n:\n \n[\n\n                \nHTML\n,\n \nHTML 5\n,\n \nXML\n,\n \nPHP\n,\n \nHTML (Rails)\n,\n\n                \nHTML (Jinja Templates)\n,\n \nHTML (Twig)\n,\n \nHTML+CFML\n,\n\n                \nColdFusion\n,\n \nColdFusionCFC\n,\n \nlaravel-blade\n,\n\n                \nHandlebars\n,\n \nAngularJS\n,\n\n                \nSomeNewLanguage\n \n// \n--- New language\n\n            \n]\n\n        \n}\n\n    \n],\n\n\n\n\n\n\nLet\ns say you want to insert a new rule between two rules. You can turn on debug mode and call the \nBracketHighlighter: (Debug) Filter Rules by Key\n then select position to see the current rule order and their position index.  To turn on Debug mode, just add \ndebug_enable\n: true\n to your user settings file.\n\n\nExample of \nBracketHighlighter: (Debug) Filter Rules by Key\n output:\n\n\n[\n\n    \n[\n\n        \n{\nname\n:\n \ncurly\n,\n \nposition\n:\n \n0\n},\n\n        \n{\nname\n:\n \nround\n,\n \nposition\n:\n \n1\n},\n\n        \n{\nname\n:\n \nsquare\n,\n \nposition\n:\n \n2\n},\n\n        \n{\nname\n:\n \nhtml\n,\n \nposition\n:\n \n3\n},\n\n        \n{\nname\n:\n \ncfml\n,\n \nposition\n:\n \n4\n},\n\n        \n{\nname\n:\n \nphp_angle\n,\n \nposition\n:\n \n5\n},\n\n        \n{\nname\n:\n \nangle\n,\n \nposition\n:\n \n6\n},\n\n        \n{\nname\n:\n \ncssedit_groups\n,\n \nposition\n:\n \n7\n},\n\n        \n{\nname\n:\n \nruby_embedded_html\n,\n \nposition\n:\n \n8\n},\n\n        \n{\nname\n:\n \nruby\n,\n \nposition\n:\n \n9\n},\n\n        \n{\nname\n:\n \nc_compile_switch\n,\n \nposition\n:\n \n10\n},\n\n        \n{\nname\n:\n \nphp_keywords\n,\n \nposition\n:\n \n11\n},\n\n        \n{\nname\n:\n \nerlang\n,\n \nposition\n:\n \n12\n},\n\n        \n{\nname\n:\n \nbash\n,\n \nposition\n:\n \n13\n},\n\n        \n{\nname\n:\n \nfish\n,\n \nposition\n:\n \n14\n},\n\n        \n{\nname\n:\n \nmylang\n,\n \nposition\n:\n \n15\n}\n\n    \n],\n\n    \n[\n\n        \n{\nname\n:\n \npy_single_quote\n,\n \nposition\n:\n \n0\n},\n\n        \n{\nname\n:\n \npy_double_quote\n,\n \nposition\n:\n \n1\n},\n\n        \n{\nname\n:\n \nsingle_quote\n,\n \nposition\n:\n \n2\n},\n\n        \n{\nname\n:\n \ndouble_quote\n,\n \nposition\n:\n \n3\n},\n\n        \n{\nname\n:\n \njsregex\n,\n \nposition\n:\n \n4\n},\n\n        \n{\nname\n:\n \nperlregex\n,\n \nposition\n:\n \n5\n},\n\n        \n{\nname\n:\n \nrubyregex\n,\n \nposition\n:\n \n6\n},\n\n        \n{\nname\n:\n \nmditalic\n,\n \nposition\n:\n \n7\n},\n\n        \n{\nname\n:\n \nmdbold\n,\n \nposition\n:\n \n8\n}\n\n    \n]\n\n\n]\n\n\n\n\n\n\nThen you can specify the position you want to insert at using the \nposition\n key:\n\n\n    \nuser_scope_brackets\n:\n \n[],\n\n    \nuser_brackets\n:\n \n[\n\n        \n{\n\n            \nname\n:\n \nmylang\n,\n\n            \nposition\n:\n \n4\n,\n \n// \n-- New position\n\n            \nopen\n:\n \n^\\\\s*\\\\b(if|subr|bytemap|enum|command|for|while|macro|do)\\\\b\n,\n\n            \nclose\n:\n \n\\\\b(e(?:if|subr|bytemap|enum|command|for|while|macro)|until)\\\\b\n,\n\n            \nstyle\n:\n \ndefault\n,\n\n            \nscope_exclude\n:\n \n[\nstring\n,\n \ncomment\n],\n\n            \nplugin_library\n:\n \nUser.bh_modules.mylangkeywords\n,\n\n            \nlanguage_filter\n:\n \nwhitelist\n,\n\n            \nlanguage_list\n:\n \n[\nmylang\n],\n\n            \nenabled\n:\n \ntrue\n\n        \n}\n\n    \n],\n\n\n\n\n\n\nAnd if you run the debug command again, you will see that the position has changed:\n\n\n        \n{\nname\n:\n \ncurly\n,\n \nposition\n:\n \n0\n},\n\n        \n{\nname\n:\n \nround\n,\n \nposition\n:\n \n1\n},\n\n        \n{\nname\n:\n \nsquare\n,\n \nposition\n:\n \n2\n},\n\n        \n{\nname\n:\n \nhtml\n,\n \nposition\n:\n \n3\n},\n\n        \n{\nname\n:\n \ntrex\n,\n \nposition\n:\n \n4\n},\n \n// \n-- New position\n\n        \n{\nname\n:\n \ncfml\n,\n \nposition\n:\n \n5\n},\n\n        \n{\nname\n:\n \nphp_angle\n,\n \nposition\n:\n \n6\n},\n\n\n\n\n\n\nThis can be used to adjust the position of default rules from your user settings as well as shown by overrides above.\n\n\nSo, unless you are forking \nBH\n to pull request a change to the default rules, you can now modify the rules all in these two settings without copying or touching the default rules:\n\n\n    \nuser_scope_brackets\n:\n \n[],\n\n    \nuser_brackets\n:\n \n[],\n\n\n\n\n\n\nThis will allow you to make changes, but still receive new updated rules.\n\n\nConfiguring Highlight Style\n\n\nEach bracket definition (described in \nConfiguring Scope Brackets\n and \nConfiguring Brackets\n) has a \nstyle\n setting that you give a style definition to.  Style definitions are defined under \nbracket_styles\n in \nbh_core.sublime-settings\n.\n\n\nThere are two special style definitions whose names are reserved: \ndefault\n and \nunmatched\n, but you can configure them.  All other custom style definitions follow the same pattern (see \ncurly\n below and compare to the special style definitions; format is the same)  All custom styles follow this pattern.  See description below:\n\n\n        \n// \ndefault\n style defines attributes that\n\n        \n// will be used for any style that does not\n\n        \n// explicitly define that attribute.  So if\n\n        \n// a style does not define a color, it will\n\n        \n// use the color from the \ndefault\n style.\n\n        \ndefault\n:\n \n{\n\n            \nicon\n:\n \ndot\n,\n\n            \ncolor\n:\n \nbrackethighlighter.default\n,\n\n            \nstyle\n:\n \nunderline\n\n        \n},\n\n\n        \n// This particular style is used to highlight\n\n        \n// unmatched bracket pairs.  It is a special\n\n        \n// style.\n\n        \nunmatched\n:\n \n{\n\n            \nicon\n:\n \nquestion\n,\n\n            \n// \ncolor\n: \nbrackethighlighter.unmatched\n,\n\n            \nstyle\n:\n \noutline\n\n        \n},\n\n        \n// User defined region styles\n\n        \ncurly\n:\n \n{\n\n            \nicon\n:\n \ncurly_bracket\n\n            \n// \ncolor\n: \nbrackethighlighter.curly\n,\n\n            \n// \nstyle\n: \nunderline\n\n        \n},\n\n        \ntag\n:\n \n{\n\n            \nicon\n:\n \ntag\n,\n\n            \n// \nendpoints\n: true,\n\n            \n// \ncolor\n: \nbrackethighlighter.tag\n,\n\n            \nstyle\n:\n \noutline\n\n        \n},\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nicon\n\n\nIcon to show in gutter. Available options are: \nangle\n, \nround\n, \ncurly\n, \nsquare\n, \ntag\n, \nstar\n, \ndot\n, \nbookmark\n, \nquestion\n, \nquote\n, \ndouble_quote\n, \nsingle_quote\n, \nsingle_quote_offset\n, \ndouble_quote_offset\n, \nnone\n.\n\n\n\n\n\n\ncolor\n\n\nScope to define color.\n\n\n\n\n\n\nstyle\n\n\nHighlight style.  Available options are: \nsolid\n, \noutline\n, \nunderline\n, \nnone\n.  \nST3\n has additional styles: \nthin_underline\n, \nsquiggly\n, \nstippled\n.\n\n\n\n\n\n\nendpoint\n\n\nBoolean to highlight just the beginning and end of bracket. This is useful for things like tags where it may be distracting highlighting the entire tag.\n\n\n\n\n\n\n\n\nAs shown in the example above, if an option is omitted, it will use the setting in \ndefault\n.  So \ncurly\n, in this example, defines \nicon\n, but will use \ndefault\n for the \ncolor\n and \nstyle\n.\n\n\nTo customize the color for \ncurly\n you can create your own custom scope.\n\n\nAdd this to your color scheme:\n\n\n        \ndict\n\n            \nkey\nname\n/key\n\n            \nstring\nBracket Curly\n/string\n\n            \nkey\nscope\n/key\n\n            \nstring\nbrackethighlighter.curly\n/string\n\n            \nkey\nsettings\n/key\n\n            \ndict\n\n                \nkey\nforeground\n/key\n\n                \nstring\n#CC99CC\n/string\n\n            \n/dict\n\n        \n/dict\n\n\n\n\n\n\nAnd then use the scope:\n\n\n        \ncurly\n:\n \n{\n\n            \nicon\n:\n \ncurly_bracket\n\n            \ncolor\n:\n \nbrackethighlighter.curly\n,\n\n            \n// \nstyle\n: \nunderline\n\n        \n},\n\n\n\n\n\n\nMy personal configurations\n\n\nIf you are curious about my personal configuration, here it is. The color scheme I use is from my \nAprosopo theme\n.\n\n\n\n\nNote\n\n\nIf a scope is not defined, it won\nt change the color. For instance, below I assign the hash rule for C/C++ preprocessors conditionals to \nbrackethighlighter.c_define\n, but I don\nt have \nbrackethighlighter.c_define\n in my theme \ndict\n. So it will look like the default color, white.\n\n\n\n\nMy personal conf: bh_core.sublime-settings\n\n\n// Define region highlight styles\n\n\nbracket_styles\n:\n \n{\n\n    \n// \ndefault\n and \nunmatched\n styles are special\n\n    \n// styles. If they are not defined here,\n\n    \n// they will be generated internally with\n\n    \n// internal defaults.\n\n\n    \n// \ndefault\n style defines attributes that\n\n    \n// will be used for any style that does not\n\n    \n// explicitly define that attribute.  So if\n\n    \n// a style does not define a color, it will\n\n    \n// use the color from the \ndefault\n style.\n\n    \ndefault\n:\n \n{\n\n        \nicon\n:\n \ndot\n,\n\n        \n// BH1\ns original default color for reference\n\n        \n// \ncolor\n: \nentity.name.class\n,\n\n        \ncolor\n:\n \nbrackethighlighter.default\n,\n\n        \nstyle\n:\n \nunderline\n\n    \n},\n\n\n    \n// This particular style is used to highlight\n\n    \n// unmatched bracket pairs.  It is a special\n\n    \n// style.\n\n    \nunmatched\n:\n \n{\n\n        \nicon\n:\n \nquestion\n,\n\n        \ncolor\n:\n \nbrackethighlighter.unmatched\n,\n\n        \nstyle\n:\n \noutline\n\n    \n},\n\n    \n// User defined region styles\n\n    \ncurly\n:\n \n{\n\n        \nicon\n:\n \ncurly_bracket\n,\n\n        \ncolor\n:\n \nbrackethighlighter.curly\n\n        \n// \nstyle\n: \nunderline\n\n    \n},\n\n    \nround\n:\n \n{\n\n        \nicon\n:\n \nround_bracket\n,\n\n        \ncolor\n:\n \nbrackethighlighter.round\n\n        \n// \nstyle\n: \nunderline\n\n    \n},\n\n    \nsquare\n:\n \n{\n\n        \nicon\n:\n \nsquare_bracket\n,\n\n        \ncolor\n:\n \nbrackethighlighter.square\n\n        \n// \nstyle\n: \nunderline\n\n    \n},\n\n    \nangle\n:\n \n{\n\n        \nicon\n:\n \nangle_bracket\n,\n\n        \ncolor\n:\n \nbrackethighlighter.angle\n\n        \n// \nstyle\n: \nunderline\n\n    \n},\n\n    \ntag\n:\n \n{\n\n        \nicon\n:\n \ntag\n,\n\n        \ncolor\n:\n \nbrackethighlighter.tag\n,\n\n        \n// \nstyle\n: \nunderline\n\n    \n},\n\n    \nc_define\n:\n \n{\n\n        \nicon\n:\n \nhash\n,\n\n        \ncolor\n:\n \nbrackethighlighter.c_define\n\n        \n// \nstyle\n: \nunderline\n\n    \n},\n\n    \nsingle_quote\n:\n \n{\n\n        \nicon\n:\n \nsingle_quote\n,\n\n        \ncolor\n:\n \nbrackethighlighter.quote\n\n        \n// \nstyle\n: \nunderline\n\n    \n},\n\n    \ndouble_quote\n:\n \n{\n\n        \nicon\n:\n \ndouble_quote\n,\n\n        \ncolor\n:\n \nbrackethighlighter.quote\n\n        \n// \nstyle\n: \nunderline\n\n    \n},\n\n    \nregex\n:\n \n{\n\n        \nicon\n:\n \nstar\n,\n\n        \ncolor\n:\n \nbrackethighlighter.quote\n\n        \n// \nstyle\n: \nunderline\n\n    \n}\n\n\n}\n\n\n\n\n\n\nMy personal conf: [Default Theme].tmTheme\n\n\ndict\n\n    \nkey\nname\n/key\n\n    \nstring\nBracket Tag\n/string\n\n    \nkey\nscope\n/key\n\n    \nstring\nbrackethighlighter.tag\n/string\n\n    \nkey\nsettings\n/key\n\n    \ndict\n\n        \nkey\nforeground\n/key\n\n        \nstring\n#66CCCC\n/string\n\n    \n/dict\n\n\n/dict\n\n\ndict\n\n    \nkey\nname\n/key\n\n    \nstring\nBracket Curly\n/string\n\n    \nkey\nscope\n/key\n\n    \nstring\nbrackethighlighter.curly\n/string\n\n    \nkey\nsettings\n/key\n\n    \ndict\n\n        \nkey\nforeground\n/key\n\n        \nstring\n#CC99CC\n/string\n\n    \n/dict\n\n\n/dict\n\n\ndict\n\n    \nkey\nname\n/key\n\n    \nstring\nBracket Round\n/string\n\n    \nkey\nscope\n/key\n\n    \nstring\nbrackethighlighter.round\n/string\n\n    \nkey\nsettings\n/key\n\n    \ndict\n\n        \nkey\nforeground\n/key\n\n        \nstring\n#FFCC66\n/string\n\n    \n/dict\n\n\n/dict\n\n\ndict\n\n    \nkey\nname\n/key\n\n    \nstring\nBracket Square\n/string\n\n    \nkey\nscope\n/key\n\n    \nstring\nbrackethighlighter.square\n/string\n\n    \nkey\nsettings\n/key\n\n    \ndict\n\n        \nkey\nforeground\n/key\n\n        \nstring\n#6699CC\n/string\n\n    \n/dict\n\n\n/dict\n\n\ndict\n\n    \nkey\nname\n/key\n\n    \nstring\nBracket Angle\n/string\n\n    \nkey\nscope\n/key\n\n    \nstring\nbrackethighlighter.angle\n/string\n\n    \nkey\nsettings\n/key\n\n    \ndict\n\n        \nkey\nforeground\n/key\n\n        \nstring\n#F99157\n/string\n\n    \n/dict\n\n\n/dict\n\n\ndict\n\n    \nkey\nname\n/key\n\n    \nstring\nBracket Quote\n/string\n\n    \nkey\nscope\n/key\n\n    \nstring\nbrackethighlighter.quote\n/string\n\n    \nkey\nsettings\n/key\n\n    \ndict\n\n        \nkey\nforeground\n/key\n\n        \nstring\n#99CC99\n/string\n\n    \n/dict\n\n\n/dict\n\n\ndict\n\n    \nkey\nname\n/key\n\n    \nstring\nBracket Unmatched\n/string\n\n    \nkey\nscope\n/key\n\n    \nstring\nbrackethighlighter.unmatched\n/string\n\n    \nkey\nsettings\n/key\n\n    \ndict\n\n        \nkey\nforeground\n/key\n\n        \nstring\n#F2777A\n/string\n\n    \n/dict\n\n\n/dict\n\n\n\n\n\n\nBracket Plugin API\n\n\nThere are two kinds of plugins that can be written \ndefinition\n plugins (plugins attached to bracket definitions via the \nplugin_library\n option) or \nrun instance\n plugins (plugins that are that are fed in the BracketHighligher via the command parameter \nplugin\n).\n\n\nBracket plugins use \nBracketRegions\n.\n\n\n\n\nclass BracketRegion(begin_pt, end_pt)\n\n\n\n\nBracketRegions\n are simple objects containing a begin pt and end pt of a bracket.\n\n\nParameters\n:\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbegin_pt\n\n\nStarting point.\n\n\n\n\n\n\nend_pt\n\n\nEnding point.\n\n\n\n\n\n\n\n\nAttributes\n:\n\n\n\n\n\n\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbegin\n\n\nThe start pt of the BracketRegion.\n\n\n\n\n\n\nend\n\n\nThe end pt of the BracketRegion.\n\n\n\n\n\n\n\n\nMethods\n:\n\n\n\n\ndef size(self)\n\n\nReturns size of region\n\n\ndef move(self, begin_pt, end_pt)\n\n\n\n\nReturns a new BracketRegion object with the points moved to the specified position.\n\n\nParmenters\n:\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbegin_pt\n\n\nStarting point.\n\n\n\n\n\n\nend_pt\n\n\nEnd Point.\n\n\n\n\n\n\n\n\nReturns\n:\n\n\n\n\n\n\n\n\nReturn\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBracketRegion\n\n\nBracketRegion with new starting and ending points\n\n\n\n\n\n\n\n\n\n\ndef to_region(self)\n\n\n\n\nConverts BracketRegion to a SublimeRegion\n\n\nReturns\n:\n\n\n\n\n\n\n\n\nReturn\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSublimeRegion\n\n\nA Sublime Region.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefinition\n Plugins\n\n\nThese are plugins that are attached to the bracket definition and aid in processing the brackets.  These kinds of plugins have three methods you can provide: \npost_match\n, \ncompare\n, and/or \nvalidate\n.\n\n\nvalidate\n\n\n\n\ndef validate(name, bracket, bracket_size, bfr)\n\n\n\n\nvalidate\n before comparing it to its corresponding opening or closing side.  This is used to determine perform additional validation on a found bracket.  For example, lets say you have a bracket that is case sensitive.  \nBH\n uses a case insensitive search.  With validate, you can ensure the originally found bracket matches the desired case.\n\n\nParameters\n:\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nThe name of the bracket definition being evaluated.\n\n\n\n\n\n\nbracket\n\n\nThe bracket region being validated.\n\n\n\n\n\n\nbracket_side\n\n\nOpening (0) or closing (1) bracket.\n\n\n\n\n\n\nbfr\n\n\nThe file buffer.\n\n\n\n\n\n\n\n\nReturns\n:\n\n\n\n\n\n\n\n\nReturn\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBoolean\n\n\nindicates whether the validation succeeded (True) or failed (False).\n\n\n\n\n\n\n\n\nExample: Should match closing tag \nend\n but not match \nEnd\n\n\ncase\n \nFoo\n \nof\n\n    \nGuard1\n \n-\n \nok\n;\n\n    \nGuard2\n \n-\n \nEnd\n\n\nend\n\n\n\n\n\n\nExample (from erlangcase.py):\n\n\ndef\n \nvalidate\n(\nname\n,\n \nbracket\n,\n \nbracket_side\n,\n \nbfr\n):\n\n    \ntext\n \n=\n \nbfr\n[\nbracket\n.\nbegin\n:\nbracket\n.\nend\n]\n\n    \nreturn\n \ntext\n.\nlower\n()\n \n==\n \ntext\n\n\n\n\n\n\n\n\n\n\ncompare\n\n\n\n\ndef compare(name, first, second, bfr)\n\n\n\n\ncompare\n is run when comparing the opening bracket with closing brackets.  This allows you to provide logic to accept or reject the pairing of an opening bracket with a closing bracket.  You should not change the text in the view during this operation.\n\n\nParamters\n:\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nThe name of the bracket definition being evaluated.\n\n\n\n\n\n\nfirst\n\n\nA bracket region for the opening bracket.\n\n\n\n\n\n\nsecond\n\n\nA bracket region for the closing bracket.\n\n\n\n\n\n\nbfr\n\n\nThe file buffer.\n\n\n\n\n\n\n\n\nReturns\n:\n\n\n\n\n\n\n\n\nReturn\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBoolean\n\n\nIndicating whether the the comparison yields a suitable match.\n\n\n\n\n\n\n\n\nExample (from phphekywords.py):\n\n\ndef\n \ncompare\n(\nname\n,\n \nfirst\n,\n \nsecond\n,\n \nbfr\n):\n\n    \nreturn\n \nend\n \n+\n \nbfr\n[\nfirst\n.\nbegin\n:\nfirst\n.\nend\n]\n.\nlower\n()\n \n==\n \nbfr\n[\nsecond\n.\nbegin\n:\nsecond\n.\nend\n]\n.\nlower\n()\n\n\n\n\n\n\n\n\n\n\npost_match\n\n\n\n\ndef post_match(name, style, first, second, center, bfr, threshold)\n\n\n\n\npost_match\n is run after the brackets have been matched.  You can do things like alter the highlighting region and change the bracket_style if needed. You should not change the text in the view during this operation.\n\n\nParameters\n:\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nThe name of the bracket definition being evaluated.\n\n\n\n\n\n\nstyle\n\n\nThe style definition name that is to be used to highlight the region.\n\n\n\n\n\n\nfirst\n\n\nA bracket region for the opening bracket.\n\n\n\n\n\n\nsecond\n\n\nA bracket region for the closing bracket.\n\n\n\n\n\n\ncenter\n\n\nPosition (pt) of cursor (in retrospect, probably not the most intuitive name; not sure why I named it this).\n\n\n\n\n\n\nbfr\n\n\nThe file buffer.\n\n\n\n\n\n\nthreshold\n\n\nThe calculated search window of the buffer that is being searched.\n\n\n\n\n\n\n\n\nReturns\n:\n\n\n\n\n\n\n\n\nReturn\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBracketRegion\n\n\nOpening bracket region.\n\n\n\n\n\n\nBracketRegion\n\n\nClosing bracket region.\n\n\n\n\n\n\nstyle\n\n\nThe name of the style definition to use.\n\n\n\n\n\n\n\n\nExample (from rubykeywords.py):\n\n\nimport\n \nre\n\n\n\n\ndef\n \npost_match\n(\nview\n,\n \nname\n,\n \nstyle\n,\n \nfirst\n,\n \nsecond\n,\n \ncenter\n,\n \nbfr\n,\n \nthreshold\n):\n\n    \nif\n \nfirst\n \nis\n \nnot\n \nNone\n:\n\n        \n# Strip whitespace from the beginning of first bracket\n\n        \nopen_bracket\n \n=\n \nbfr\n[\nfirst\n.\nbegin\n:\nfirst\n.\nend\n]\n\n        \nif\n \nopen_bracket\n \n!=\n \ndo\n:\n\n            \nm\n \n=\n \nre\n.\nmatch\n(\nr\n^(\\s*\\b)[\\w\\W]*\n,\n \nopen_bracket\n)\n\n            \nif\n \nm\n:\n\n                \nfirst\n \n=\n \nfirst\n.\nmove\n(\nfirst\n.\nbegin\n \n+\n \nm\n.\nend\n(\n1\n),\n \nfirst\n.\nend\n)\n\n    \nreturn\n \nfirst\n,\n \nsecond\n,\n \nstyle\n\n\n\n\n\n\nExample (snippet from tags.py)\n\n\ndef\n \npost_match\n(\nview\n,\n \nname\n,\n \nstyle\n,\n \nfirst\n,\n \nsecond\n,\n \ncenter\n,\n \nbfr\n,\n \nthreshold\n):\n\n    \nleft\n,\n \nright\n \n=\n \nfirst\n,\n \nsecond\n\n    \nthreshold\n \n=\n \n[\n0\n,\n \nlen\n(\nbfr\n)]\n \nif\n \nthreshold\n \nis\n \nNone\n \nelse\n \nthreshold\n\n    \ntag_settings\n \n=\n \nsublime\n.\nload_settings\n(\nbh_core.sublime-settings\n)\n\n    \ntag_mode\n \n=\n \nget_tag_mode\n(\nview\n,\n \ntag_settings\n.\nget\n(\ntag_mode\n,\n \n{}))\n\n    \ntag_style\n \n=\n \ntag_settings\n.\nget\n(\ntag_style\n,\n \nangle\n)\n\n    \nbracket_style\n \n=\n \nstyle\n\n\n    \nif\n \nfirst\n \nis\n \nnot\n \nNone\n \nand\n \ntag_mode\n \nis\n \nnot\n \nNone\n:\n\n        \nmatcher\n \n=\n \nTagMatch\n(\nview\n,\n \nbfr\n,\n \nthreshold\n,\n \nfirst\n,\n \nsecond\n,\n \ncenter\n,\n \ntag_mode\n)\n\n        \nleft\n,\n \nright\n \n=\n \nmatcher\n.\nmatch\n()\n\n        \nif\n \nnot\n \nmatcher\n.\nno_tag\n:\n\n            \nbracket_style\n \n=\n \ntag_style\n\n\n    \nreturn\n \nleft\n,\n \nright\n,\n \nbracket_style\n\n\n\n\n\n\n\n\n\n\nhighlighting\n\n\n\n\ndef highlighting(view, name, style, right)\n\n\n\n\nhighlighting\n is the last hook that gets run.  This is at a point when \nBH\n no longer cares about what the \nactual\n bracket region is, so it is safe to modify it for highlighting purposes.  The view really shouldn\nt be modified here.\n\n\nParameters\n:\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nThe current view containing brackets.\n\n\n\n\n\n\nname\n\n\nThe name of the bracket definition being evaluated.\n\n\n\n\n\n\nstyle\n\n\nThe style definition name that is to be used to highlight the region.\n\n\n\n\n\n\nleft\n\n\nA bracket region for the opening bracket (could be \nNone\n).\n\n\n\n\n\n\nright\n\n\nA bracket region for the closing bracket (could be \nNone\n).\n\n\n\n\n\n\n\n\nReturns\n:\n\n\n\n\n\n\n\n\nReturn\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBracketRegion\n\n\nOpening bracket region.\n\n\n\n\n\n\nBracketRegion\n\n\nClosing bracket region.\n\n\n\n\n\n\n\n\nExample (snippet from tags.py)\n\n\ndef\n \nhighlighting\n(\nview\n,\n \nname\n,\n \nstyle\n,\n \nleft\n,\n \nright\n):\n\n    \n\n\n    Highlight only the tag name.\n\n\n    \n\n    \nif\n \nstyle\n \n==\n \ntag\n:\n\n        \ntag_name\n \n=\n \n[\\w\\:\\.\\-]+\n\n        \nif\n \nleft\n \nis\n \nnot\n \nNone\n:\n\n            \nregion\n \n=\n \nview\n.\nfind\n(\ntag_name\n,\n \nleft\n.\nbegin\n)\n\n            \nleft\n \n=\n \nleft\n.\nmove\n(\nregion\n.\nbegin\n(),\n \nregion\n.\nend\n())\n\n        \nif\n \nright\n \nis\n \nnot\n \nNone\n:\n\n            \nregion\n \n=\n \nview\n.\nfind\n(\ntag_name\n,\n \nright\n.\nbegin\n)\n\n            \nright\n \n=\n \nright\n.\nmove\n(\nregion\n.\nbegin\n(),\n \nregion\n.\nend\n())\n\n    \nreturn\n \nleft\n,\n \nright\n\n\n\n\n\n\n\n\n\n\nRun Instance\n Plugins\n\n\nRun instance\n plugins are fed into the command executing a BracketHighlighter match via the \nplugin\n parameter.\n\n\nExample of run instance plugin getting called:\n\n\n// Go to left bracket\n\n    \n{\n\n        \ncaption\n:\n \nBracketHighlighter: Jump to Left Bracket\n,\n\n        \ncommand\n:\n \nbh_key\n,\n\n        \nargs\n:\n\n        \n{\n\n            \nlines\n \n:\n \ntrue\n,\n\n            \nplugin\n:\n\n            \n{\n\n                \ntype\n:\n \n[\n__all__\n],\n\n                \ncommand\n:\n \nbh_modules.bracketselect\n,\n\n                \nargs\n:\n \n{\nselect\n:\n \nleft\n}\n\n            \n}\n\n        \n}\n\n    \n},\n\n\n\n\n\n\nThe \nplugin\n paramter is a dictionary that contains 3 parameters to define what plugin should get run, with what arguments, and on what bracket definition.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nAn array containing the bracket definition names that the plugin should be run on.  Use \n__all__\n for all bracket definitions.\n\n\n\n\n\n\ncommand\n\n\nThe plugin to run.  For internal plugins, they are referenced by \nbh_modules.\nplugin name\n.  For custom plugins, you should use the folder path relative to \nPackages\n.  So if I had a plugin called \nmyplugin.py\n in my \nUser\n folder, I would use \nUser.myplugin\n.\n\n\n\n\n\n\nargs\n\n\nA dictionary containing the arguments to feed into the plugin.\n\n\n\n\n\n\n\n\nYou create \nrun instance\n plugins by deriving a class from the \nBracketPluginCommand\n class.  Then you provide a method called \nplugin\n that returns the class.\n\n\n\n\nclass BracketPluginCommand()\n\n\n\n\nAttributes\n:\n\n\n\n\n\n\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nThe sublime view containing the bracket (don\nt change this).\n\n\n\n\n\n\nleft\n\n\nA bracket region for the opening bracket (can be changed).\n\n\n\n\n\n\nright\n\n\nA bracket region for the closing bracket (can be changed).\n\n\n\n\n\n\nselection\n\n\nAn array containing the selection that triggered the match (can be changed).\n\n\n\n\n\n\n\n\nMethods\n:\n\n\n\n\ndef run(edit, name, \nargs\n)\n\n\n\n\nParameters\n:\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nedit\n\n\nThe sublime edit object.\n\n\n\n\n\n\nname\n\n\nThe bracket definition being evaluated.\n\n\n\n\n\n\n\n\n\n\n\n\nExample (from foldbracket.py):\n\n\nimport\n \nBracketHighlighter.bh_plugin\n \nas\n \nbh_plugin\n\n\nimport\n \nsublime\n\n\n\n\nclass\n \nFoldBrackets\n(\nbh_plugin\n.\nBracketPluginCommand\n):\n\n    \ndef\n \nrun\n(\nself\n,\n \nedit\n,\n \nname\n):\n\n        \ncontent\n \n=\n \nsublime\n.\nRegion\n(\nself\n.\nleft\n.\nend\n,\n \nself\n.\nright\n.\nbegin\n)\n\n        \nnew_content\n \n=\n \n[\ncontent\n]\n\n        \nif\n \ncontent\n.\nsize\n()\n \n \n0\n:\n\n            \nif\n \nself\n.\nview\n.\nfold\n(\ncontent\n)\n \n==\n \nFalse\n:\n\n                \nnew_content\n \n=\n \nself\n.\nview\n.\nunfold\n(\ncontent\n)\n\n        \nself\n.\nselection\n \n=\n \nnew_content\n\n\n\n\ndef\n \nplugin\n():\n\n    \nreturn\n \nFoldBrackets", 
            "title": "Customizing"
        }, 
        {
            "location": "/customize/#customization", 
            "text": "Tweaking BracketHighlighter.", 
            "title": "Customization"
        }, 
        {
            "location": "/customize/#overview", 
            "text": "BH  is extremely flexible and can be customized and extended to fit a user s needs.  The first step is to create a  bh_core.sublime-settings  in your  User  folder.  This is where the bracket and style rules live.  By changing these settings, you can add support for new languages, or change the look of highlighting, and much more.", 
            "title": "Overview"
        }, 
        {
            "location": "/customize/#general-settings", 
            "text": "Style and color will be discussed in greater depth in the  Configuring Highlight Style  section.  But there are a number of general setting you can adjust to change how things look or work.  The settings are commented to explain their functionality.  These are the basic settings you can change:       //Debug logging \n     debug_enable :   false , \n\n     // When only either the left or right bracket can be found \n     // this defines if the unmatched bracket should be shown. \n     show_unmatched   :   true , \n\n     // Do the opposite of  show_unmatched  for the languages listed below \n     show_unmatched_exceptions :   [], \n\n     // Enable high visibility by default when sublime starts up \n     // If sublime is already running and this gets changed, \n     // you will not see any changes (restart required to see change) \n     high_visibility_enabled_by_default :   false , \n\n     // Experimental: Creates a visible bar at the beginning of all lines between \n     // multiline bracket spans. \n     content_highlight_bar :   false , \n\n     // Experimental: Align the content highlight bar at the bracket indent level \n     align_content_highlight_bar :   false , \n\n     // High visibility style and color for high visibility mode \n     // (solid|outline|underline) \n     // ST3 has additional options of (thin_underline|squiggly|stippled) \n     high_visibility_style :   outline , \n\n     // (scope|__default__|__bracket__) \n     high_visibility_color :   __bracket__ , \n\n     // Match brackets only when the cursor is touching the inside of the bracket \n     match_only_adjacent :   false , \n\n     // Character threshold to search \n     search_threshold :   5000 , \n\n     // Ignore threshold \n     ignore_threshold :   false , \n\n     // Set mode for string escapes to ignore (regex|string) \n     bracket_string_escape_mode :   string , \n\n     // Set max number of multi-select brackets that will be searched automatically \n     auto_selection_threshold   :   10 , \n\n     // Enable this to completely kill highlighting if  auto_selection_threshold \n     // is exceeded.  Default is to highlight up to the  auto_selection_threshold . \n     kill_highlight_on_threshold :   true , \n\n     // Disable gutter icons when doing multi-select \n     no_multi_select_icons :   false ,", 
            "title": "General Settings"
        }, 
        {
            "location": "/customize/#configuring-brackets", 
            "text": "BH  has been written to allow users to define any brackets they would like to have highlighted.  There are two kinds of brackets you can define:  scope_brackets  (search file for scope regions and then use regex to test for opening and closing brackets) and  brackets  (use regex to find opening and closing brackets).   bracket  type should usually be the preferred type.   scope_brackets  are usually used for brackets whose opening and closing are the same and not distinguishable form one another by regex; scope brackets must be contained in a continuous scope region like string for quotes etc.   Tip  Brackets can be modified or even added without copying the entire bracket rule lists to the user settings.  See  Bracket Rule Management  for more info.", 
            "title": "Configuring Brackets"
        }, 
        {
            "location": "/customize/#configuring-brackets-rules", 
            "text": "Brackets are defined under  brackets  in  bh_core.sublime-settings .  Angle and Curly bracket will be used as an example (not all options may be shown in these examples):           { \n             name :   angle , \n             open :   ( ) , \n             close :   ( ) , \n             style :   angle , \n             scope_exclude :   [ string ,   comment ,   keyword.operator ], \n             language_filter :   whitelist , \n             language_list :   [ HTML ,   HTML 5 ,   XML ,   PHP ,   HTML+CFML ,   ColdFusion ,   ColdFusionCFC ], \n             plugin_library :   bh_modules.tags , \n             enabled :   true \n         }, \n         { \n             name :   curly , \n             open :   (\\\\{) , \n             close :   (\\\\}) , \n             style :   curly , \n             scope_exclude :   [ string ,   comment ], \n             scope_exclude_exceptions :   [ string.other.math.block.environment.latex ], \n             language_filter :   blacklist , \n             language_list :   [ Plain text ], \n             find_in_sub_search :   true , \n             ignore_string_escape :   true , \n             enabled :   true \n         },      Parameter  Description      name  The name of the bracket (should be unique)    open  Defines the opening bracket (one and only one capturing group must be present)    close  Defines the closing bracket (one and only one capturing group must be present)    style  Name of style definition to be used to highlight the brackets.  See  Configuring Bracket Styles  for more info.    scope_exclude  Scopes where the opening and closing brackets should be ignored.    language_filter  This works in conjunction with  language_list .  It specifies whether  language_list  is a  blacklist  or  whitelist .    language_list  An array of tmLanguage file names that should be avoided or included for highlighting.  Looks to  language_filter  to determine if avoidance or inclusion is used.    enabled  Disable or enable rule.    scope_exclude_exceptions (optional)  Used to ignore excluding of sub scopes such as in the curly example above where  string  is excluded, but not  string.other.math.block.environment.latex .    plugin_library (optional)  Defines plugin to use for determining matches (see Bracket Plugin API for more info on matching plugins).    find_in_sub_search (optional)  This rule should be included when doing sub bracket matching in  scope_brackets  (like finding round brackets between quotes etc.).  The setting must be as string and can be either (true    ignore_string_escape (optional)  Do not ignore sub brackets found in strings and regex when escaped, but use internal escape logic to determine if the brackets should be ignored based on whether regex or string escape mode is set.", 
            "title": "Configuring Brackets Rules"
        }, 
        {
            "location": "/customize/#configuring-scope-brackets-rules", 
            "text": "Scope Brackets are defined under  scope_brackets  in  bh_core.sublime-settings .  Python Single Quote bracket will be used as an example (not all options are shown in this example):           { \n             name :   py_single_quote , \n             open :   u?r?((?: )? ) , \n             close :   ((?: )? ) , \n             style :   single_quote , \n             scopes :   [ string ], \n             language_filter :   whitelist , \n             language_list :   [ Python ], \n             sub_bracket_search :   true , \n             enabled :   true \n         },      Parameters  Description      name  The name of the bracket (should be unique).    open  Defines the opening bracket (one and only one capturing group must be present).    close  Defines the closing bracket (one and only one capturing group must be present).    style  Name of style definition to be used to highlight the brackets.  See  Configuring Bracket Styles  for more info.    scopes  Scope that should be searched to find the opening and closing brackets.    language_filter  This works in conjunction with  language_list .  It specifies whether  language_list  is a  blacklist  or  whitelist .    language_list  An array of tmLanguage file names that should be avoided or included for highlighting.  Looks to  language_filter  to determine if avoidance or inclusion is used.    sub_bracket_search  Should this scope bracket also search for sub brackets (like curly brackets in strings etc.).    enabled  Disable or enable rule.    plugin_library (optional)  Defines plugin to use for determining matches (see Bracket Plugin API for more info on matching plugins).", 
            "title": "Configuring Scope Brackets Rules"
        }, 
        {
            "location": "/customize/#bracket-rule-management", 
            "text": "In the past, BracketHighlighter required a user to copy the entire bracket list to the user  bh_core.sublime-settings  file.  This was a cumbersome requirement that also punished a user because if they did this, they wouldn t automatically get updates to the rules as all the rules were now overridden by the user s settings file.  BracketHighlighter now let s you add or modify existing rules without overriding the entire rule set or even the entire target rule.  Let s say you have a custom language you want to have on your machine. Now, you can simply add it to one of the two settings arrays:  user_scope_brackets  and  user_brackets :       user_scope_brackets :   [], \n     user_brackets :   [ \n         { \n             name :   mylang , \n             open :   ^\\\\s*\\\\b(if|subr|bytemap|enum|command|for|while|macro|do)\\\\b , \n             close :   \\\\b(e(?:if|subr|bytemap|enum|command|for|while|macro)|until)\\\\b , \n             style :   default , \n             scope_exclude :   [ string ,   comment ], \n             plugin_library :   User.bh_modules.mylangkeywords , \n             language_filter :   whitelist , \n             language_list :   [ mylang ], \n             enabled :   true \n         } \n     ],   Let s say you want to modify an existing rule, maybe just tweak the language list, all you have to do is use the same name and the item you want to change. Only that attribute will be overridden:       user_brackets :   [ \n         // Angle \n         { \n             name :   angle , \n             language_list :   [ \n                 HTML ,   HTML 5 ,   XML ,   PHP ,   HTML (Rails) , \n                 HTML (Jinja Templates) ,   HTML (Twig) ,   HTML+CFML , \n                 ColdFusion ,   ColdFusionCFC ,   laravel-blade , \n                 Handlebars ,   AngularJS , \n                 SomeNewLanguage   //  --- New language \n             ] \n         } \n     ],   Let s say you want to insert a new rule between two rules. You can turn on debug mode and call the  BracketHighlighter: (Debug) Filter Rules by Key  then select position to see the current rule order and their position index.  To turn on Debug mode, just add  debug_enable : true  to your user settings file.  Example of  BracketHighlighter: (Debug) Filter Rules by Key  output:  [ \n     [ \n         { name :   curly ,   position :   0 }, \n         { name :   round ,   position :   1 }, \n         { name :   square ,   position :   2 }, \n         { name :   html ,   position :   3 }, \n         { name :   cfml ,   position :   4 }, \n         { name :   php_angle ,   position :   5 }, \n         { name :   angle ,   position :   6 }, \n         { name :   cssedit_groups ,   position :   7 }, \n         { name :   ruby_embedded_html ,   position :   8 }, \n         { name :   ruby ,   position :   9 }, \n         { name :   c_compile_switch ,   position :   10 }, \n         { name :   php_keywords ,   position :   11 }, \n         { name :   erlang ,   position :   12 }, \n         { name :   bash ,   position :   13 }, \n         { name :   fish ,   position :   14 }, \n         { name :   mylang ,   position :   15 } \n     ], \n     [ \n         { name :   py_single_quote ,   position :   0 }, \n         { name :   py_double_quote ,   position :   1 }, \n         { name :   single_quote ,   position :   2 }, \n         { name :   double_quote ,   position :   3 }, \n         { name :   jsregex ,   position :   4 }, \n         { name :   perlregex ,   position :   5 }, \n         { name :   rubyregex ,   position :   6 }, \n         { name :   mditalic ,   position :   7 }, \n         { name :   mdbold ,   position :   8 } \n     ]  ]   Then you can specify the position you want to insert at using the  position  key:       user_scope_brackets :   [], \n     user_brackets :   [ \n         { \n             name :   mylang , \n             position :   4 ,   //  -- New position \n             open :   ^\\\\s*\\\\b(if|subr|bytemap|enum|command|for|while|macro|do)\\\\b , \n             close :   \\\\b(e(?:if|subr|bytemap|enum|command|for|while|macro)|until)\\\\b , \n             style :   default , \n             scope_exclude :   [ string ,   comment ], \n             plugin_library :   User.bh_modules.mylangkeywords , \n             language_filter :   whitelist , \n             language_list :   [ mylang ], \n             enabled :   true \n         } \n     ],   And if you run the debug command again, you will see that the position has changed:           { name :   curly ,   position :   0 }, \n         { name :   round ,   position :   1 }, \n         { name :   square ,   position :   2 }, \n         { name :   html ,   position :   3 }, \n         { name :   trex ,   position :   4 },   //  -- New position \n         { name :   cfml ,   position :   5 }, \n         { name :   php_angle ,   position :   6 },   This can be used to adjust the position of default rules from your user settings as well as shown by overrides above.  So, unless you are forking  BH  to pull request a change to the default rules, you can now modify the rules all in these two settings without copying or touching the default rules:       user_scope_brackets :   [], \n     user_brackets :   [],   This will allow you to make changes, but still receive new updated rules.", 
            "title": "Bracket Rule Management"
        }, 
        {
            "location": "/customize/#configuring-highlight-style", 
            "text": "Each bracket definition (described in  Configuring Scope Brackets  and  Configuring Brackets ) has a  style  setting that you give a style definition to.  Style definitions are defined under  bracket_styles  in  bh_core.sublime-settings .  There are two special style definitions whose names are reserved:  default  and  unmatched , but you can configure them.  All other custom style definitions follow the same pattern (see  curly  below and compare to the special style definitions; format is the same)  All custom styles follow this pattern.  See description below:           //  default  style defines attributes that \n         // will be used for any style that does not \n         // explicitly define that attribute.  So if \n         // a style does not define a color, it will \n         // use the color from the  default  style. \n         default :   { \n             icon :   dot , \n             color :   brackethighlighter.default , \n             style :   underline \n         }, \n\n         // This particular style is used to highlight \n         // unmatched bracket pairs.  It is a special \n         // style. \n         unmatched :   { \n             icon :   question , \n             //  color :  brackethighlighter.unmatched , \n             style :   outline \n         }, \n         // User defined region styles \n         curly :   { \n             icon :   curly_bracket \n             //  color :  brackethighlighter.curly , \n             //  style :  underline \n         }, \n         tag :   { \n             icon :   tag , \n             //  endpoints : true, \n             //  color :  brackethighlighter.tag , \n             style :   outline \n         },      Parameter  Description      icon  Icon to show in gutter. Available options are:  angle ,  round ,  curly ,  square ,  tag ,  star ,  dot ,  bookmark ,  question ,  quote ,  double_quote ,  single_quote ,  single_quote_offset ,  double_quote_offset ,  none .    color  Scope to define color.    style  Highlight style.  Available options are:  solid ,  outline ,  underline ,  none .   ST3  has additional styles:  thin_underline ,  squiggly ,  stippled .    endpoint  Boolean to highlight just the beginning and end of bracket. This is useful for things like tags where it may be distracting highlighting the entire tag.     As shown in the example above, if an option is omitted, it will use the setting in  default .  So  curly , in this example, defines  icon , but will use  default  for the  color  and  style .  To customize the color for  curly  you can create your own custom scope.  Add this to your color scheme:           dict \n             key name /key \n             string Bracket Curly /string \n             key scope /key \n             string brackethighlighter.curly /string \n             key settings /key \n             dict \n                 key foreground /key \n                 string #CC99CC /string \n             /dict \n         /dict    And then use the scope:           curly :   { \n             icon :   curly_bracket \n             color :   brackethighlighter.curly , \n             //  style :  underline \n         },", 
            "title": "Configuring Highlight Style"
        }, 
        {
            "location": "/customize/#my-personal-configurations", 
            "text": "If you are curious about my personal configuration, here it is. The color scheme I use is from my  Aprosopo theme .   Note  If a scope is not defined, it won t change the color. For instance, below I assign the hash rule for C/C++ preprocessors conditionals to  brackethighlighter.c_define , but I don t have  brackethighlighter.c_define  in my theme  dict . So it will look like the default color, white.   My personal conf: bh_core.sublime-settings  // Define region highlight styles  bracket_styles :   { \n     //  default  and  unmatched  styles are special \n     // styles. If they are not defined here, \n     // they will be generated internally with \n     // internal defaults. \n\n     //  default  style defines attributes that \n     // will be used for any style that does not \n     // explicitly define that attribute.  So if \n     // a style does not define a color, it will \n     // use the color from the  default  style. \n     default :   { \n         icon :   dot , \n         // BH1 s original default color for reference \n         //  color :  entity.name.class , \n         color :   brackethighlighter.default , \n         style :   underline \n     }, \n\n     // This particular style is used to highlight \n     // unmatched bracket pairs.  It is a special \n     // style. \n     unmatched :   { \n         icon :   question , \n         color :   brackethighlighter.unmatched , \n         style :   outline \n     }, \n     // User defined region styles \n     curly :   { \n         icon :   curly_bracket , \n         color :   brackethighlighter.curly \n         //  style :  underline \n     }, \n     round :   { \n         icon :   round_bracket , \n         color :   brackethighlighter.round \n         //  style :  underline \n     }, \n     square :   { \n         icon :   square_bracket , \n         color :   brackethighlighter.square \n         //  style :  underline \n     }, \n     angle :   { \n         icon :   angle_bracket , \n         color :   brackethighlighter.angle \n         //  style :  underline \n     }, \n     tag :   { \n         icon :   tag , \n         color :   brackethighlighter.tag , \n         //  style :  underline \n     }, \n     c_define :   { \n         icon :   hash , \n         color :   brackethighlighter.c_define \n         //  style :  underline \n     }, \n     single_quote :   { \n         icon :   single_quote , \n         color :   brackethighlighter.quote \n         //  style :  underline \n     }, \n     double_quote :   { \n         icon :   double_quote , \n         color :   brackethighlighter.quote \n         //  style :  underline \n     }, \n     regex :   { \n         icon :   star , \n         color :   brackethighlighter.quote \n         //  style :  underline \n     }  }   My personal conf: [Default Theme].tmTheme  dict \n     key name /key \n     string Bracket Tag /string \n     key scope /key \n     string brackethighlighter.tag /string \n     key settings /key \n     dict \n         key foreground /key \n         string #66CCCC /string \n     /dict  /dict  dict \n     key name /key \n     string Bracket Curly /string \n     key scope /key \n     string brackethighlighter.curly /string \n     key settings /key \n     dict \n         key foreground /key \n         string #CC99CC /string \n     /dict  /dict  dict \n     key name /key \n     string Bracket Round /string \n     key scope /key \n     string brackethighlighter.round /string \n     key settings /key \n     dict \n         key foreground /key \n         string #FFCC66 /string \n     /dict  /dict  dict \n     key name /key \n     string Bracket Square /string \n     key scope /key \n     string brackethighlighter.square /string \n     key settings /key \n     dict \n         key foreground /key \n         string #6699CC /string \n     /dict  /dict  dict \n     key name /key \n     string Bracket Angle /string \n     key scope /key \n     string brackethighlighter.angle /string \n     key settings /key \n     dict \n         key foreground /key \n         string #F99157 /string \n     /dict  /dict  dict \n     key name /key \n     string Bracket Quote /string \n     key scope /key \n     string brackethighlighter.quote /string \n     key settings /key \n     dict \n         key foreground /key \n         string #99CC99 /string \n     /dict  /dict  dict \n     key name /key \n     string Bracket Unmatched /string \n     key scope /key \n     string brackethighlighter.unmatched /string \n     key settings /key \n     dict \n         key foreground /key \n         string #F2777A /string \n     /dict  /dict", 
            "title": "My personal configurations"
        }, 
        {
            "location": "/customize/#bracket-plugin-api", 
            "text": "There are two kinds of plugins that can be written  definition  plugins (plugins attached to bracket definitions via the  plugin_library  option) or  run instance  plugins (plugins that are that are fed in the BracketHighligher via the command parameter  plugin ).  Bracket plugins use  BracketRegions .   class BracketRegion(begin_pt, end_pt)   BracketRegions  are simple objects containing a begin pt and end pt of a bracket.  Parameters :     Parameter  Description      begin_pt  Starting point.    end_pt  Ending point.     Attributes :     Attribute  Description      begin  The start pt of the BracketRegion.    end  The end pt of the BracketRegion.     Methods :   def size(self)  Returns size of region  def move(self, begin_pt, end_pt)   Returns a new BracketRegion object with the points moved to the specified position.  Parmenters :     Parameter  Description      begin_pt  Starting point.    end_pt  End Point.     Returns :     Return  Description      BracketRegion  BracketRegion with new starting and ending points      def to_region(self)   Converts BracketRegion to a SublimeRegion  Returns :     Return  Description      SublimeRegion  A Sublime Region.", 
            "title": "Bracket Plugin API"
        }, 
        {
            "location": "/customize/#definition-plugins", 
            "text": "These are plugins that are attached to the bracket definition and aid in processing the brackets.  These kinds of plugins have three methods you can provide:  post_match ,  compare , and/or  validate .  validate   def validate(name, bracket, bracket_size, bfr)   validate  before comparing it to its corresponding opening or closing side.  This is used to determine perform additional validation on a found bracket.  For example, lets say you have a bracket that is case sensitive.   BH  uses a case insensitive search.  With validate, you can ensure the originally found bracket matches the desired case.  Parameters :     Parameter  Description      name  The name of the bracket definition being evaluated.    bracket  The bracket region being validated.    bracket_side  Opening (0) or closing (1) bracket.    bfr  The file buffer.     Returns :     Return  Description      Boolean  indicates whether the validation succeeded (True) or failed (False).     Example: Should match closing tag  end  but not match  End  case   Foo   of \n     Guard1   -   ok ; \n     Guard2   -   End  end   Example (from erlangcase.py):  def   validate ( name ,   bracket ,   bracket_side ,   bfr ): \n     text   =   bfr [ bracket . begin : bracket . end ] \n     return   text . lower ()   ==   text     compare   def compare(name, first, second, bfr)   compare  is run when comparing the opening bracket with closing brackets.  This allows you to provide logic to accept or reject the pairing of an opening bracket with a closing bracket.  You should not change the text in the view during this operation.  Paramters :     Parameter  Description      name  The name of the bracket definition being evaluated.    first  A bracket region for the opening bracket.    second  A bracket region for the closing bracket.    bfr  The file buffer.     Returns :     Return  Description      Boolean  Indicating whether the the comparison yields a suitable match.     Example (from phphekywords.py):  def   compare ( name ,   first ,   second ,   bfr ): \n     return   end   +   bfr [ first . begin : first . end ] . lower ()   ==   bfr [ second . begin : second . end ] . lower ()      post_match   def post_match(name, style, first, second, center, bfr, threshold)   post_match  is run after the brackets have been matched.  You can do things like alter the highlighting region and change the bracket_style if needed. You should not change the text in the view during this operation.  Parameters :     Parameter  Description      name  The name of the bracket definition being evaluated.    style  The style definition name that is to be used to highlight the region.    first  A bracket region for the opening bracket.    second  A bracket region for the closing bracket.    center  Position (pt) of cursor (in retrospect, probably not the most intuitive name; not sure why I named it this).    bfr  The file buffer.    threshold  The calculated search window of the buffer that is being searched.     Returns :     Return  Description      BracketRegion  Opening bracket region.    BracketRegion  Closing bracket region.    style  The name of the style definition to use.     Example (from rubykeywords.py):  import   re  def   post_match ( view ,   name ,   style ,   first ,   second ,   center ,   bfr ,   threshold ): \n     if   first   is   not   None : \n         # Strip whitespace from the beginning of first bracket \n         open_bracket   =   bfr [ first . begin : first . end ] \n         if   open_bracket   !=   do : \n             m   =   re . match ( r ^(\\s*\\b)[\\w\\W]* ,   open_bracket ) \n             if   m : \n                 first   =   first . move ( first . begin   +   m . end ( 1 ),   first . end ) \n     return   first ,   second ,   style    Example (snippet from tags.py)  def   post_match ( view ,   name ,   style ,   first ,   second ,   center ,   bfr ,   threshold ): \n     left ,   right   =   first ,   second \n     threshold   =   [ 0 ,   len ( bfr )]   if   threshold   is   None   else   threshold \n     tag_settings   =   sublime . load_settings ( bh_core.sublime-settings ) \n     tag_mode   =   get_tag_mode ( view ,   tag_settings . get ( tag_mode ,   {})) \n     tag_style   =   tag_settings . get ( tag_style ,   angle ) \n     bracket_style   =   style \n\n     if   first   is   not   None   and   tag_mode   is   not   None : \n         matcher   =   TagMatch ( view ,   bfr ,   threshold ,   first ,   second ,   center ,   tag_mode ) \n         left ,   right   =   matcher . match () \n         if   not   matcher . no_tag : \n             bracket_style   =   tag_style \n\n     return   left ,   right ,   bracket_style      highlighting   def highlighting(view, name, style, right)   highlighting  is the last hook that gets run.  This is at a point when  BH  no longer cares about what the  actual  bracket region is, so it is safe to modify it for highlighting purposes.  The view really shouldn t be modified here.  Parameters :     Parameter  Description      view  The current view containing brackets.    name  The name of the bracket definition being evaluated.    style  The style definition name that is to be used to highlight the region.    left  A bracket region for the opening bracket (could be  None ).    right  A bracket region for the closing bracket (could be  None ).     Returns :     Return  Description      BracketRegion  Opening bracket region.    BracketRegion  Closing bracket region.     Example (snippet from tags.py)  def   highlighting ( view ,   name ,   style ,   left ,   right ): \n          Highlight only the tag name.       \n     if   style   ==   tag : \n         tag_name   =   [\\w\\:\\.\\-]+ \n         if   left   is   not   None : \n             region   =   view . find ( tag_name ,   left . begin ) \n             left   =   left . move ( region . begin (),   region . end ()) \n         if   right   is   not   None : \n             region   =   view . find ( tag_name ,   right . begin ) \n             right   =   right . move ( region . begin (),   region . end ()) \n     return   left ,   right", 
            "title": "'Definition' Plugins"
        }, 
        {
            "location": "/customize/#run-instance-plugins", 
            "text": "Run instance  plugins are fed into the command executing a BracketHighlighter match via the  plugin  parameter.  Example of run instance plugin getting called:  // Go to left bracket \n     { \n         caption :   BracketHighlighter: Jump to Left Bracket , \n         command :   bh_key , \n         args : \n         { \n             lines   :   true , \n             plugin : \n             { \n                 type :   [ __all__ ], \n                 command :   bh_modules.bracketselect , \n                 args :   { select :   left } \n             } \n         } \n     },    The  plugin  paramter is a dictionary that contains 3 parameters to define what plugin should get run, with what arguments, and on what bracket definition.     Parameter  Description      type  An array containing the bracket definition names that the plugin should be run on.  Use  __all__  for all bracket definitions.    command  The plugin to run.  For internal plugins, they are referenced by  bh_modules. plugin name .  For custom plugins, you should use the folder path relative to  Packages .  So if I had a plugin called  myplugin.py  in my  User  folder, I would use  User.myplugin .    args  A dictionary containing the arguments to feed into the plugin.     You create  run instance  plugins by deriving a class from the  BracketPluginCommand  class.  Then you provide a method called  plugin  that returns the class.   class BracketPluginCommand()   Attributes :     Attribute  Description      view  The sublime view containing the bracket (don t change this).    left  A bracket region for the opening bracket (can be changed).    right  A bracket region for the closing bracket (can be changed).    selection  An array containing the selection that triggered the match (can be changed).     Methods :   def run(edit, name,  args )   Parameters :     Parameter  Description      edit  The sublime edit object.    name  The bracket definition being evaluated.       Example (from foldbracket.py):  import   BracketHighlighter.bh_plugin   as   bh_plugin  import   sublime  class   FoldBrackets ( bh_plugin . BracketPluginCommand ): \n     def   run ( self ,   edit ,   name ): \n         content   =   sublime . Region ( self . left . end ,   self . right . begin ) \n         new_content   =   [ content ] \n         if   content . size ()     0 : \n             if   self . view . fold ( content )   ==   False : \n                 new_content   =   self . view . unfold ( content ) \n         self . selection   =   new_content  def   plugin (): \n     return   FoldBrackets", 
            "title": "'Run Instance' Plugins"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing \n Support\n\n\nSteps for contributing and getting support.\n\n\n\n\nOverview\n\n\n\n\n\n\n\n\nSublime Versions\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nST2\n \n= version \n \nST3\n\n\nSupported on a separate branch, but not actively.  Any further fixes or enhancements must come from the community.  Issues for versions less than \nST3\n will not be addressed moving forward by me.  Pull requests are welcome for back-porting features, enhancements, or fixes to the old branch, but the content of the pull \nmust\n already exist on the main, actively developed branch.  I will not allow an older branch to exceed the main branch in regards to functionality.\n\n\n\n\n\n\nST3\n\n\nFully supported and actively maintained.\n\n\n\n\n\n\n\n\nBracketHighligher welcomes contribution from the community and is encouraged.  Contribution can be done in a variety of ways:\n\n\n\n\nBug reports.\n\n\nReviewing code.\n\n\nCode patches via pull requests.\n\n\nDocumentation improvements via pull requests.\n\n\n\n\n\n\nBracket Rules are Supported by the Community\n\n\nThe most common requested enhancement for \nBH\n is for new rules to add support for {insert your favorite language here}.  I, like you, am proficient in very specific languages.  I probably don\nt use your favorite language or there would already be a support for it.  I don\nt have time to learn the nuances of your language.  For these reasons, support for new language brackets \nrequires\n pull requests from the community.\n\n\nThough I will not personally implement rules for your favorite language, I am more than willing to offer suggestions and guidance to help those who may struggle to create rules for their specific language of interest.\n\n\n\n\nBug Reports\n\n\n\n\n\n\nPlease \nread the documentation\n and \nsearch the issue tracker\n to try to find the answer to your question \nbefore\n posting an issue.\n\n\n\n\n\n\nWhen creating an issue on the \nBH\n repository, please provide as much info as possible:\n\n\n\n\nSublime Text build.\n\n\nOperating system.\n\n\nErrors in console.\n\n\nDetailed description of the problem.\n\n\nExamples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.\n\n\n\n\nThe more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.\n\n\n\n\n\n\nBe prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.\n\n\n\n\n\n\nReviewing Code\n\n\nTake part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.\n\n\nPull Requests\n\n\nBH\n will gladly accept pull requests.  If you plan on contributing directly to the code, there are a couple of things to be mindful of.\n\n\nBH\n runs continuous integration tests on pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.\n\n\nFeel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.\n\n\nRunning Validation Tests\n\n\nThere are a couple of dependencies that must present before running the tests.\n\n\n\n\n\n\nAs \nST3\n is the only current actively supported version, Python 3.3 must be used to validate the tests.\n\n\n\n\n\n\nUnit tests are run with \nnose\n.  You can install nose via:\n\n\npip install nose\n\n\n\n\n\nThe tests should be run from the root folder of \nBH\n by using the following command:\n\n\nnosetests .\n\n\n\n\n\n\n\n\n\nLinting is performed on the entire project with \nflake8\n and \nflake8_docstrings\n.  These can be installed via:\n\n\npip install flake8\npip install flake8_docstrings\n\n\n\n\n\nLinting is performed with the following command:\n\n\nflake8 .\n\n\n\n\n\n\n\n\n\nDocumentation Improvements\n\n\nHelp with documentation is always appreciated and can be done via pull requests.  There shouldn\nt be any need to run validation tests if only updating documentation.\n\n\nI currently use a combination of using [mkdocs][mkdocs.org] with my own custom Python Markdown \nextensions\n to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is \nmkdocs serve\n.", 
            "title": "Contributing & Support"
        }, 
        {
            "location": "/contributing/#contributing-support", 
            "text": "Steps for contributing and getting support.", 
            "title": "Contributing  Support"
        }, 
        {
            "location": "/contributing/#overview", 
            "text": "Sublime Versions  Description      ST2   = version    ST3  Supported on a separate branch, but not actively.  Any further fixes or enhancements must come from the community.  Issues for versions less than  ST3  will not be addressed moving forward by me.  Pull requests are welcome for back-porting features, enhancements, or fixes to the old branch, but the content of the pull  must  already exist on the main, actively developed branch.  I will not allow an older branch to exceed the main branch in regards to functionality.    ST3  Fully supported and actively maintained.     BracketHighligher welcomes contribution from the community and is encouraged.  Contribution can be done in a variety of ways:   Bug reports.  Reviewing code.  Code patches via pull requests.  Documentation improvements via pull requests.    Bracket Rules are Supported by the Community  The most common requested enhancement for  BH  is for new rules to add support for {insert your favorite language here}.  I, like you, am proficient in very specific languages.  I probably don t use your favorite language or there would already be a support for it.  I don t have time to learn the nuances of your language.  For these reasons, support for new language brackets  requires  pull requests from the community.  Though I will not personally implement rules for your favorite language, I am more than willing to offer suggestions and guidance to help those who may struggle to create rules for their specific language of interest.", 
            "title": "Overview"
        }, 
        {
            "location": "/contributing/#bug-reports", 
            "text": "Please  read the documentation  and  search the issue tracker  to try to find the answer to your question  before  posting an issue.    When creating an issue on the  BH  repository, please provide as much info as possible:   Sublime Text build.  Operating system.  Errors in console.  Detailed description of the problem.  Examples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.   The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.    Be prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.", 
            "title": "Bug Reports"
        }, 
        {
            "location": "/contributing/#reviewing-code", 
            "text": "Take part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.", 
            "title": "Reviewing Code"
        }, 
        {
            "location": "/contributing/#pull-requests", 
            "text": "BH  will gladly accept pull requests.  If you plan on contributing directly to the code, there are a couple of things to be mindful of.  BH  runs continuous integration tests on pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.  Feel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.", 
            "title": "Pull Requests"
        }, 
        {
            "location": "/contributing/#running-validation-tests", 
            "text": "There are a couple of dependencies that must present before running the tests.    As  ST3  is the only current actively supported version, Python 3.3 must be used to validate the tests.    Unit tests are run with  nose .  You can install nose via:  pip install nose  The tests should be run from the root folder of  BH  by using the following command:  nosetests .    Linting is performed on the entire project with  flake8  and  flake8_docstrings .  These can be installed via:  pip install flake8\npip install flake8_docstrings  Linting is performed with the following command:  flake8 .", 
            "title": "Running Validation Tests"
        }, 
        {
            "location": "/contributing/#documentation-improvements", 
            "text": "Help with documentation is always appreciated and can be done via pull requests.  There shouldn t be any need to run validation tests if only updating documentation.  I currently use a combination of using [mkdocs][mkdocs.org] with my own custom Python Markdown  extensions  to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is  mkdocs serve .", 
            "title": "Documentation Improvements"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\n\n\nReleased under the MIT license.\n\n\nCopyright \n 2013 - 2015 Isaac Muse \n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \nSoftware\n), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \nAS IS\n, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "Released under the MIT license.  Copyright   2013 - 2015 Isaac Muse   Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the  Software ), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED  AS IS , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }
    ]
}